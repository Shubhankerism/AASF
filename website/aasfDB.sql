-- phpMyAdmin SQL Dump
-- version 4.6.6deb5
-- https://www.phpmyadmin.net/
--
-- Host: localhost:3306
-- Generation Time: Apr 15, 2018 at 03:50 AM
-- Server version: 5.7.21-0ubuntu0.17.10.1
-- PHP Version: 7.1.15-0ubuntu0.17.10.1

SET SQL_MODE = "NO_AUTO_VALUE_ON_ZERO";
SET time_zone = "+00:00";


/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!40101 SET NAMES utf8mb4 */;

--
-- Database: `aasfDB`
--

-- --------------------------------------------------------

--
-- Table structure for table `admin_details`
--

CREATE TABLE `admin_details` (
  `id` int(50) NOT NULL,
  `username` varchar(100) NOT NULL,
  `password` varchar(100) NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Dumping data for table `admin_details`
--

INSERT INTO `admin_details` (`id`, `username`, `password`) VALUES
(1, 'aasf', '$2y$10$wKTAq3rmNOjPfLPYctDOc.60sSIXIOGak2GfheqXjJL9N6AD2n74u');

-- --------------------------------------------------------

--
-- Table structure for table `author`
--

CREATE TABLE `author` (
  `author_id` int(200) NOT NULL,
  `username` varchar(100) NOT NULL,
  `password` varchar(250) NOT NULL,
  `author_email` varchar(100) NOT NULL,
  `password_reset_token` varchar(255) NOT NULL
) ENGINE=MyISAM DEFAULT CHARSET=latin1;

--
-- Dumping data for table `author`
--

INSERT INTO `author` (`author_id`, `username`, `password`, `author_email`, `password_reset_token`) VALUES
(1, 'shivam', '$2y$10$ZW7C5AE/rza0TUPxtxu3DuUJwjaXCIRFquA6KaDL/4Xvq4y4OOOcG', 'shivamrathore307@gmail.com', '0'),
(2, 'juhi', '$2y$10$h52pft1oeAcCqjZ7cXxFjuG061areWDVxqOb8EPOcrLOyvVe/Rxm6', 'shivamrathore307@gmail.com', '0'),
(3, 'jeetu', '$2y$10$gHKFYhD6rLnwPpFRDD.7leh.3o5ibQN4GYoy2K8.5P9bVwWDXEBDK', 'shivamrathore307@gmail.com', '0');

-- --------------------------------------------------------

--
-- Table structure for table `calendar`
--

CREATE TABLE `calendar` (
  `id` int(11) NOT NULL,
  `title` varchar(255) NOT NULL,
  `startdate` varchar(48) NOT NULL,
  `enddate` varchar(48) NOT NULL,
  `allDay` varchar(5) NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Dumping data for table `calendar`
--

INSERT INTO `calendar` (`id`, `title`, `startdate`, `enddate`, `allDay`) VALUES
(1, 'JAM', '2018-01-02', '2018-01-02', 'false'),
(2, 'GD', '2018-01-07T00:00:00', '2018-01-07T00:00:00', 'false'),
(3, 'Debate', '2018-01-28T00:00:00', '2018-01-28T00:00:00', 'false'),
(7, 'New Event', '2018-01-26T00:00:00', '2018-01-26T00:00:00', 'false'),
(8, 'hiq', '2018-01-22', '2018-01-25', 'false'),
(10, 'New Event', '2018-01-12', '2018-01-14', 'false'),
(11, 'debate', '2018-01-31', '2018-02-03', 'false'),
(12, 'Android Week', '2018-02-12', '2018-02-17', 'false'),
(13, 'New Event', '2018-01-05', '2018-01-07', 'false'),
(14, 'New Event', '2018-01-16T00:00:00+05:30', '2018-01-16T00:00:00+05:30', 'false'),
(15, 'New Event', '2018-01-09', '2018-01-11', 'false'),
(16, 'New Event', '2017-12-31T00:00:00+05:30', '2017-12-31T00:00:00+05:30', 'false'),
(17, 'Android', '2018-04-09T00:00:00', '2018-04-12T00:00:00', 'false'),
(18, 'ML', '2018-04-16T00:00:00+05:30', '2018-04-16T00:00:00+05:30', 'false');

-- --------------------------------------------------------

--
-- Table structure for table `comment`
--

CREATE TABLE `comment` (
  `post_id` varchar(200) NOT NULL DEFAULT '0',
  `comment_id` int(10) UNSIGNED NOT NULL,
  `comment_text` text NOT NULL,
  `parent_id` int(10) UNSIGNED NOT NULL,
  `ip_address` varchar(20) NOT NULL,
  `email_address` varchar(100) NOT NULL,
  `created_date` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `created_by` varchar(45) NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

--
-- Dumping data for table `comment`
--

INSERT INTO `comment` (`post_id`, `comment_id`, `comment_text`, `parent_id`, `ip_address`, `email_address`, `created_date`, `created_by`) VALUES
('27', 40, 'grw', 0, '14.139.240.251', 'tjuhi.321@gmail.com', '2018-04-08 15:41:10', 'juhi'),
('27', 41, 'dsvda', 40, '14.139.240.251', 'tjuhi.321@gmail.com', '2018-04-08 15:41:24', 'shivam'),
('30', 42, 'vareewf', 0, '47.247.249.164', 'tjuhi.321@gmail.com', '2018-04-08 18:12:23', 'juhi');

-- --------------------------------------------------------

--
-- Table structure for table `events`
--

CREATE TABLE `events` (
  `id` int(11) NOT NULL,
  `name` varchar(50) NOT NULL,
  `attendance` int(11) NOT NULL DEFAULT '0',
  `first` varchar(50) NOT NULL DEFAULT '',
  `second` varchar(50) NOT NULL DEFAULT '',
  `third` varchar(50) NOT NULL DEFAULT '',
  `date` varchar(25) NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Dumping data for table `events`
--

INSERT INTO `events` (`id`, `name`, `attendance`, `first`, `second`, `third`, `date`) VALUES
(16, 'gd', 2, 'ipg_2016003ipg_2016004', 'ipg_2016002ipg_2016001', 'ipg_2016003ipg_2016004', '10/24/1984'),
(17, 'Brandaid', 2, 'ipg_2016003', 'ipg_2016002', 'ipg_2016004', '10/24/2017'),
(18, 'Brandaid', 2, 'ipg_2016003', 'ipg_2016002', 'ipg_2016004', '10/24/2017'),
(19, 'Brandaid', 2, 'ipg_2016003', 'ipg_2016002', 'ipg_2016004', '10/24/2017'),
(20, 'PC', 2, 'ipg_2016003', 'ipg_2016002', 'ipg_2016004', '10/24/2017'),
(21, 'PC', 2, 'ipg_2016003', 'ipg_2016002', 'ipg_2016004', '10/24/2017'),
(22, 'PC', 2, '', 'ipg_2016002', '', '10/24/2017'),
(23, 'PC', 2, '', 'ipg_2016002', '', '10/24/2017'),
(24, 'PC', 2, '', 'ipg_2016002', '', '10/24/2017'),
(25, 'PC', 2, '', 'ipg_2016002', '', '10/24/2017'),
(26, 'PC', 2, '', 'ipg_2016002', '', '10/24/2017'),
(27, 'PC', 2, '', 'ipg_2016002', '', '10/24/2017'),
(28, 'PC', 2, '', 'ipg_2016002', '', '10/24/2017'),
(29, 'dsf', 0, '', 'ipg_2016002', '', '10/24/2017'),
(30, 'dsf', 2, '', 'ipg_2016002', '', '10/24/2017'),
(31, 'dsf', 2, '', 'ipg_2016002', '', '10/24/2017'),
(32, 'dsf', 2, 'ipg_2016003', 'ipg_2016002', 'ipg_2016004', '10/24/2017'),
(33, 'dsf', 2, 'ipg_2016003', 'ipg_2016002', 'ipg_2016004', '10/24/2017'),
(34, 'dsf', 2, 'ipg_2016003', 'ipg_2016002', 'ipg_2016004', '10/24/2017'),
(35, 'dsf', 2, 'ipg_2016003', 'ipg_2016002', 'ipg_2016004', '10/24/2017'),
(36, 'dsf', 2, 'ipg_2016003', 'ipg_2016002', 'ipg_2016004', '10/24/2017'),
(37, 'PC', 2, 'ipg_2016002', 'ipg_2016003', 'ipg_2016004', '10/24/2017');

-- --------------------------------------------------------

--
-- Table structure for table `events_points`
--

CREATE TABLE `events_points` (
  `id` int(200) NOT NULL,
  `technical_points` int(200) NOT NULL,
  `managerial_points` int(200) NOT NULL,
  `oratory_points` int(200) NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Dumping data for table `events_points`
--

INSERT INTO `events_points` (`id`, `technical_points`, `managerial_points`, `oratory_points`) VALUES
(0, 484, 160, 100),
(1, 484, 160, 100);

-- --------------------------------------------------------

--
-- Table structure for table `feed_back`
--

CREATE TABLE `feed_back` (
  `sn` int(200) NOT NULL,
  `name` varchar(500) NOT NULL,
  `email` varchar(500) NOT NULL,
  `message` varchar(2000) NOT NULL
) ENGINE=MyISAM DEFAULT CHARSET=latin1;

--
-- Dumping data for table `feed_back`
--

INSERT INTO `feed_back` (`sn`, `name`, `email`, `message`) VALUES
(18, 'Swarup', 'abc@hij.com', 'Hey Juhi!');

-- --------------------------------------------------------

--
-- Table structure for table `hiq`
--

CREATE TABLE `hiq` (
  `id` int(25) NOT NULL,
  `name` varchar(50) NOT NULL,
  `attendance` int(11) NOT NULL,
  `date` varchar(25) NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Dumping data for table `hiq`
--

INSERT INTO `hiq` (`id`, `name`, `attendance`, `date`) VALUES
(12, 'windows', 2, '10/24/2017'),
(13, 'JAVA', 2, '03/08/2018'),
(14, 'game d', 1, '10/24/2017'),
(15, 'game d', 2, '10/24/2017');

-- --------------------------------------------------------

--
-- Table structure for table `post_table`
--

CREATE TABLE `post_table` (
  `post_id` int(200) NOT NULL,
  `post_title` varchar(200) NOT NULL,
  `category` varchar(200) NOT NULL,
  `organiser_name` varchar(500) NOT NULL,
  `post_image` varchar(500) NOT NULL,
  `author_id` int(200) NOT NULL,
  `author_username` varchar(200) NOT NULL,
  `post_time` datetime NOT NULL,
  `post` text NOT NULL
) ENGINE=MyISAM DEFAULT CHARSET=latin1;

--
-- Dumping data for table `post_table`
--

INSERT INTO `post_table` (`post_id`, `post_title`, `category`, `organiser_name`, `post_image`, `author_id`, `author_username`, `post_time`, `post`) VALUES
(26, 'Big Integer Program in C++', 'Coding', 'Rajesh Kumar', 'https://assets.entrepreneur.com/content/3x2/1300/20150708172005-coding-working-workspace-apple-macintosh.jpeg', 2, 'juhi', '2018-02-02 16:06:06', '<p>Once I was searching for BigInteger programs in C++, then I found this one. I really don&#39;t remember the source, as I copied it then.<br />\r\nBut now as I am using this program for many problems, I thought of adding this one as it is really good.<br />\r\n<br />\r\nIf you use Java or python, you will never need this program.&nbsp;<br />\r\n<br />\r\n// The BigInteger Ripper<br />\r\n<br />\r\n#include<br />\r\n#include<br />\r\n#include<br />\r\n#include<br />\r\n#include<br />\r\nusing namespace std;<br />\r\ntypedef long long LL;<br />\r\n// base and base_digits must be consistent<br />\r\nconst int base = 1000000000;<br />\r\nconst int base_digits = 9;<br />\r\n<br />\r\nstruct bigint {<br />\r\n&nbsp;&nbsp;&nbsp; vector a;<br />\r\n&nbsp;&nbsp;&nbsp; int sign;<br />\r\n<br />\r\n&nbsp;&nbsp;&nbsp; bigint() :<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; sign(1) {<br />\r\n&nbsp;&nbsp;&nbsp; }<br />\r\n<br />\r\n&nbsp;&nbsp;&nbsp; bigint(long long v) {<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; *this = v;<br />\r\n&nbsp;&nbsp;&nbsp; }<br />\r\n<br />\r\n&nbsp;&nbsp;&nbsp; bigint(const string &amp;s) {<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; read(s);<br />\r\n&nbsp;&nbsp;&nbsp; }<br />\r\n<br />\r\n&nbsp;&nbsp;&nbsp; void operator=(const bigint &amp;v) {<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; sign = v.sign;<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; a = v.a;<br />\r\n&nbsp;&nbsp;&nbsp; }<br />\r\n<br />\r\n&nbsp;&nbsp;&nbsp; void operator=(long long v) {<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; sign = 1;<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (v &lt; 0)<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; sign = -1, v = -v;<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; for (; v &gt; 0; v = v / base)<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; a.push_back(v % base);<br />\r\n&nbsp;&nbsp;&nbsp; }<br />\r\n<br />\r\n&nbsp;&nbsp;&nbsp; bigint operator+(const bigint &amp;v) const {<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (sign == v.sign) {<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; bigint res = v;<br />\r\n<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; for (int i = 0, carry = 0; i &lt; (int) max(a.size(), v.a.size()) || carry; ++i) {<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (i == (int) res.a.size())<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; res.a.push_back(0);<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; res.a[i] += carry + (i &lt; (int) a.size() ? a[i] : 0);<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; carry = res.a[i] &gt;= base;<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (carry)<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; res.a[i] -= base;<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return res;<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return *this - (-v);<br />\r\n&nbsp;&nbsp;&nbsp; }<br />\r\n<br />\r\n&nbsp;&nbsp;&nbsp; bigint operator-(const bigint &amp;v) const {<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (sign == v.sign) {<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (abs() &gt;= v.abs()) {<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; bigint res = *this;<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; for (int i = 0, carry = 0; i &lt; (int) v.a.size() || carry; ++i) {<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; res.a[i] -= carry + (i &lt; (int) v.a.size() ? v.a[i] : 0);<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; carry = res.a[i] &lt; 0;<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (carry)<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; res.a[i] += base;<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; res.trim();<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return res;<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return -(v - *this);<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return *this + (-v);<br />\r\n&nbsp;&nbsp;&nbsp; }<br />\r\n<br />\r\n&nbsp;&nbsp;&nbsp; void operator*=(int v) {<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (v &lt; 0)<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; sign = -sign, v = -v;<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; for (int i = 0, carry = 0; i &lt; (int) a.size() || carry; ++i) {<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (i == (int) a.size())<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; a.push_back(0);<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; long long cur = a[i] * (long long) v + carry;<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; carry = (int) (cur / base);<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; a[i] = (int) (cur % base);<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //asm(&quot;divl %%ecx&quot; : &quot;=a&quot;(carry), &quot;=d&quot;(a[i]) : &quot;A&quot;(cur), &quot;c&quot;(base));<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; trim();<br />\r\n&nbsp;&nbsp;&nbsp; }<br />\r\n<br />\r\n&nbsp;&nbsp;&nbsp; bigint operator*(int v) const {<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; bigint res = *this;<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; res *= v;<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return res;<br />\r\n&nbsp;&nbsp;&nbsp; }<br />\r\n<br />\r\n&nbsp;&nbsp;&nbsp; friend pair divmod(const bigint &amp;a1, const bigint &amp;b1) {<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; int norm = base / (b1.a.back() + 1);<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; bigint a = a1.abs() * norm;<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; bigint b = b1.abs() * norm;<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; bigint q, r;<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; q.a.resize(a.a.size());<br />\r\n<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; for (int i = a.a.size() - 1; i &gt;= 0; i--) {<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; r *= base;<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; r += a.a[i];<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; int s1 = r.a.size() &lt;= b.a.size() ? 0 : r.a[b.a.size()];<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; int s2 = r.a.size() &lt;= b.a.size() - 1 ? 0 : r.a[b.a.size() - 1];<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; int d = ((long long) base * s1 + s2) / b.a.back();<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; r -= b * d;<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; while (r &lt; 0)<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; r += b, --d;<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; q.a[i] = d;<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br />\r\n<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; q.sign = a1.sign * b1.sign;<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; r.sign = a1.sign;<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; q.trim();<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; r.trim();<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return make_pair(q, r / norm);<br />\r\n&nbsp;&nbsp;&nbsp; }<br />\r\n<br />\r\n&nbsp;&nbsp;&nbsp; bigint operator/(const bigint &amp;v) const {<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return divmod(*this, v).first;<br />\r\n&nbsp;&nbsp;&nbsp; }<br />\r\n<br />\r\n&nbsp;&nbsp;&nbsp; bigint operator%(const bigint &amp;v) const {<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return divmod(*this, v).second;<br />\r\n&nbsp;&nbsp;&nbsp; }<br />\r\n<br />\r\n&nbsp;&nbsp;&nbsp; void operator/=(int v) {<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (v &lt; 0)<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; sign = -sign, v = -v;<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; for (int i = (int) a.size() - 1, rem = 0; i &gt;= 0; --i) {<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; long long cur = a[i] + rem * (long long) base;<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; a[i] = (int) (cur / v);<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; rem = (int) (cur % v);<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; trim();<br />\r\n&nbsp;&nbsp;&nbsp; }<br />\r\n<br />\r\n&nbsp;&nbsp;&nbsp; bigint operator/(int v) const {<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; bigint res = *this;<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; res /= v;<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return res;<br />\r\n&nbsp;&nbsp;&nbsp; }<br />\r\n<br />\r\n&nbsp;&nbsp;&nbsp; int operator%(int v) const {<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (v &lt; 0)<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; v = -v;<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; int m = 0;<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; for (int i = a.size() - 1; i &gt;= 0; --i)<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; m = (a[i] + m * (long long) base) % v;<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return m * sign;<br />\r\n&nbsp;&nbsp;&nbsp; }<br />\r\n<br />\r\n&nbsp;&nbsp;&nbsp; void operator+=(const bigint &amp;v) {<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; *this = *this + v;<br />\r\n&nbsp;&nbsp;&nbsp; }<br />\r\n&nbsp;&nbsp;&nbsp; void operator-=(const bigint &amp;v) {<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; *this = *this - v;<br />\r\n&nbsp;&nbsp;&nbsp; }<br />\r\n&nbsp;&nbsp;&nbsp; void operator*=(const bigint &amp;v) {<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; *this = *this * v;<br />\r\n&nbsp;&nbsp;&nbsp; }<br />\r\n&nbsp;&nbsp;&nbsp; void operator/=(const bigint &amp;v) {<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; *this = *this / v;<br />\r\n&nbsp;&nbsp;&nbsp; }<br />\r\n<br />\r\n&nbsp;&nbsp;&nbsp; bool operator&lt;(const bigint &amp;v) const {<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (sign != v.sign)<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return sign &lt; v.sign;<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (a.size() != v.a.size())<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return a.size() * sign &lt; v.a.size() * v.sign;<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; for (int i = a.size() - 1; i &gt;= 0; i--)<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (a[i] != v.a[i])<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return a[i] * sign &lt; v.a[i] * sign;<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return false;<br />\r\n&nbsp;&nbsp;&nbsp; }<br />\r\n<br />\r\n&nbsp;&nbsp;&nbsp; bool operator&gt;(const bigint &amp;v) const {<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return v &lt; *this;<br />\r\n&nbsp;&nbsp;&nbsp; }<br />\r\n&nbsp;&nbsp;&nbsp; bool operator&lt;=(const bigint &amp;v) const {<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return !(v &lt; *this);<br />\r\n&nbsp;&nbsp;&nbsp; }<br />\r\n&nbsp;&nbsp;&nbsp; bool operator&gt;=(const bigint &amp;v) const {<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return !(*this &lt; v);<br />\r\n&nbsp;&nbsp;&nbsp; }<br />\r\n&nbsp;&nbsp;&nbsp; bool operator==(const bigint &amp;v) const {<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return !(*this &lt; v) &amp;&amp; !(v &lt; *this);<br />\r\n&nbsp;&nbsp;&nbsp; }<br />\r\n&nbsp;&nbsp;&nbsp; bool operator!=(const bigint &amp;v) const {<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return *this &lt; v || v &lt; *this;<br />\r\n&nbsp;&nbsp;&nbsp; }<br />\r\n<br />\r\n&nbsp;&nbsp;&nbsp; void trim() {<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; while (!a.empty() &amp;&amp; !a.back())<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; a.pop_back();<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (a.empty())<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; sign = 1;<br />\r\n&nbsp;&nbsp;&nbsp; }<br />\r\n<br />\r\n&nbsp;&nbsp;&nbsp; bool isZero() const {<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return a.empty() || (a.size() == 1 &amp;&amp; !a[0]);<br />\r\n&nbsp;&nbsp;&nbsp; }<br />\r\n<br />\r\n&nbsp;&nbsp;&nbsp; bigint operator-() const {<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; bigint res = *this;<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; res.sign = -sign;<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return res;<br />\r\n&nbsp;&nbsp;&nbsp; }<br />\r\n<br />\r\n&nbsp;&nbsp;&nbsp; bigint abs() const {<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; bigint res = *this;<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; res.sign *= res.sign;<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return res;<br />\r\n&nbsp;&nbsp;&nbsp; }<br />\r\n<br />\r\n&nbsp;&nbsp;&nbsp; long long longValue() const {<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; long long res = 0;<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; for (int i = a.size() - 1; i &gt;= 0; i--)<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; res = res * base + a[i];<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return res * sign;<br />\r\n&nbsp;&nbsp;&nbsp; }<br />\r\n<br />\r\n&nbsp;&nbsp;&nbsp; friend bigint gcd(const bigint &amp;a, const bigint &amp;b) {<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return b.isZero() ? a : gcd(b, a % b);<br />\r\n&nbsp;&nbsp;&nbsp; }<br />\r\n&nbsp;&nbsp;&nbsp; friend bigint lcm(const bigint &amp;a, const bigint &amp;b) {<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return a / gcd(a, b) * b;<br />\r\n&nbsp;&nbsp;&nbsp; }<br />\r\n<br />\r\n&nbsp;&nbsp;&nbsp; void read(const string &amp;s) {<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; sign = 1;<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; a.clear();<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; int pos = 0;<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; while (pos &lt; (int) s.size() &amp;&amp; (s[pos] == &#39;-&#39; || s[pos] == &#39;+&#39;)) {<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (s[pos] == &#39;-&#39;)<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; sign = -sign;<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ++pos;<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; for (int i = s.size() - 1; i &gt;= pos; i -= base_digits) {<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; int x = 0;<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; for (int j = max(pos, i - base_digits + 1); j &lt;= i; j++)<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; x = x * 10 + s[j] - &#39;0&#39;;<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; a.push_back(x);<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; trim();<br />\r\n&nbsp;&nbsp;&nbsp; }<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;<br />\r\n&nbsp;&nbsp;&nbsp; int length(){<br />\r\n&nbsp;&nbsp;&nbsp; int l=0,back=a.back();<br />\r\n&nbsp;&nbsp;&nbsp; while(back){l++;back/=10;}<br />\r\n&nbsp;&nbsp;&nbsp; l+=((a.size()-1)*base_digits);<br />\r\n&nbsp;&nbsp;&nbsp; return l;<br />\r\n&nbsp;&nbsp;&nbsp; }<br />\r\n<br />\r\n&nbsp;&nbsp;&nbsp; friend istream&amp; operator&gt;&gt;(istream &amp;stream, bigint &amp;v) {<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; string s;<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; stream &gt;&gt; s;<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; v.read(s);<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return stream;<br />\r\n&nbsp;&nbsp;&nbsp; }<br />\r\n<br />\r\n&nbsp;&nbsp;&nbsp; friend ostream&amp; operator&lt;&lt;(ostream &amp;stream, const bigint &amp;v) {<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (v.sign == -1)<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; stream &lt;&lt; &#39;-&#39;;<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; stream &lt;&lt; (v.a.empty() ? 0 : v.a.back());<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; for (int i = (int) v.a.size() - 2; i &gt;= 0; --i)<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; stream &lt;&lt; setw(base_digits) &lt;&lt; setfill(&#39;0&#39;) &lt;&lt; v.a[i];<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return stream;<br />\r\n&nbsp;&nbsp;&nbsp; }<br />\r\n<br />\r\n&nbsp;&nbsp;&nbsp; static vector convert_base(const vector &amp;a, int old_digits, int new_digits) {<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; vector p(max(old_digits, new_digits) + 1);<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; p[0] = 1;<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; for (int i = 1; i &lt; (int) p.size(); i++)<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; p[i] = p[i - 1] * 10;<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; vector res;<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; long long cur = 0;<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; int cur_digits = 0;<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; for (int i = 0; i &lt; (int) a.size(); i++) {<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; cur += a[i] * p[cur_digits];<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; cur_digits += old_digits;<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; while (cur_digits &gt;= new_digits) {<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; res.push_back(int(cur % p[new_digits]));<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; cur /= p[new_digits];<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; cur_digits -= new_digits;<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; res.push_back((int) cur);<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; while (!res.empty() &amp;&amp; !res.back())<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; res.pop_back();<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return res;<br />\r\n&nbsp;&nbsp;&nbsp; }<br />\r\n<br />\r\n&nbsp;&nbsp;&nbsp; typedef vector vll;<br />\r\n<br />\r\n&nbsp;&nbsp;&nbsp; static vll karatsubaMultiply(const vll &amp;a, const vll &amp;b) {<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; int n = a.size();<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; vll res(n + n);<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (n &lt;= 32) {<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; for (int i = 0; i &lt; n; i++)<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; for (int j = 0; j &lt; n; j++)<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; res[i + j] += a[i] * b[j];<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return res;<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br />\r\n<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; int k = n &gt;&gt; 1;<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; vll a1(a.begin(), a.begin() + k);<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; vll a2(a.begin() + k, a.end());<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; vll b1(b.begin(), b.begin() + k);<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; vll b2(b.begin() + k, b.end());<br />\r\n<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; vll a1b1 = karatsubaMultiply(a1, b1);<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; vll a2b2 = karatsubaMultiply(a2, b2);<br />\r\n<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; for (int i = 0; i &lt; k; i++)<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; a2[i] += a1[i];<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; for (int i = 0; i &lt; k; i++)<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; b2[i] += b1[i];<br />\r\n<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; vll r = karatsubaMultiply(a2, b2);<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; for (int i = 0; i &lt; (int) a1b1.size(); i++)<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; r[i] -= a1b1[i];<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; for (int i = 0; i &lt; (int) a2b2.size(); i++)<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; r[i] -= a2b2[i];<br />\r\n<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; for (int i = 0; i &lt; (int) r.size(); i++)<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; res[i + k] += r[i];<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; for (int i = 0; i &lt; (int) a1b1.size(); i++)<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; res[i] += a1b1[i];<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; for (int i = 0; i &lt; (int) a2b2.size(); i++)<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; res[i + n] += a2b2[i];<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return res;<br />\r\n&nbsp;&nbsp;&nbsp; }<br />\r\n<br />\r\n&nbsp;&nbsp;&nbsp; bigint operator*(const bigint &amp;v) const {<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; vector a6 = convert_base(this-&gt;a, base_digits, 6);<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; vector b6 = convert_base(v.a, base_digits, 6);<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; vll a(a6.begin(), a6.end());<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; vll b(b6.begin(), b6.end());<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; while (a.size() &lt; b.size())<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; a.push_back(0);<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; while (b.size() &lt; a.size())<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; b.push_back(0);<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; while (a.size() &amp; (a.size() - 1))<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; a.push_back(0), b.push_back(0);<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; vll c = karatsubaMultiply(a, b);<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; bigint res;<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; res.sign = sign * v.sign;<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; for (int i = 0, carry = 0; i &lt; (int) c.size(); i++) {<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; long long cur = c[i] + carry;<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; res.a.push_back((int) (cur % 1000000));<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; carry = (int) (cur / 1000000);<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; res.a = convert_base(res.a, 6, base_digits);<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; res.trim();<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return res;<br />\r\n&nbsp;&nbsp;&nbsp; }<br />\r\n};<br />\r\n<br />\r\n<br />\r\nvoid recursive_fraction(bigint a,bigint b)<br />\r\n{<br />\r\n&nbsp; bigint n,i;<br />\r\n&nbsp; if(a&gt;b)<br />\r\n&nbsp; {<br />\r\n&nbsp;&nbsp;&nbsp; n=a/b;<br />\r\n&nbsp;&nbsp;&nbsp; for(i=1;i&lt;=n;i+=1)<br />\r\n&nbsp;&nbsp;&nbsp; {<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; cout&lt;&lt;&quot;1 &quot;;<br />\r\n&nbsp;&nbsp;&nbsp; }<br />\r\n&nbsp;&nbsp;&nbsp; a=(a-b*n);<br />\r\n&nbsp; }<br />\r\n&nbsp; while(a!=0)<br />\r\n&nbsp; {<br />\r\n&nbsp;&nbsp;&nbsp; n=b/a;<br />\r\n&nbsp;&nbsp;&nbsp; if(b%a!=0) n=n+1;<br />\r\n&nbsp;&nbsp;&nbsp; cout&lt; &nbsp;&nbsp;&nbsp; a=n*a-b;<br />\r\n&nbsp;&nbsp;&nbsp; b=n*b;<br />\r\n&nbsp; }<br />\r\n}<br />\r\nint main()<br />\r\n{<br />\r\n&nbsp;while(true)<br />\r\n&nbsp;{<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; bigint num;<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; cin&gt;&gt;num;<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if(num == -1)break;<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; bigint nine = 9;<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; bigint ans = num/nine;<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; bigint zero = 0;<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if(num%nine != zero)<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ans = ans + 1;<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; cout&lt; &nbsp;}<br />\r\n&nbsp; return 0;<br />\r\n}<br />\r\n<br />\r\n<br />\r\nPS: (My implementation of Biginteger add, multiply and subtraction, just coded it once in the beginning)<br />\r\n<br />\r\n// My Implementation<br />\r\n<br />\r\n#include<br />\r\n#include<br />\r\n#include<br />\r\n#include<br />\r\ntypedef long long int int64;<br />\r\nusing namespace std;<br />\r\nchar op1[100001],op2[100001],res[200003];<br />\r\n<br />\r\nchar * convert(int64 a,char * num)<br />\r\n{<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp; int len = int(log10(double(a)));<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp; num[len+1] = &#39;&#39;;<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp; while(a&gt;0)<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp; {<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; num[len--] = a%10 + &#39;0&#39;;<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; a = a/10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp; }<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp; return num;<br />\r\n}<br />\r\n<br />\r\nchar * convert(char * a,char * num)<br />\r\n{<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp; strcpy(num,a);<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp; return num;<br />\r\n}<br />\r\n<br />\r\nchar * reverse(char * num)<br />\r\n{<br />\r\n&nbsp;char x[200003];int lo = 0;<br />\r\n&nbsp;int len = strlen(num);<br />\r\n&nbsp;while(num[len-1]==&#39;0&#39; &amp;&amp; len&gt;=1)<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; len--;<br />\r\n<br />\r\n&nbsp;if(len==0)<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {num[0]=&#39;0&#39;;num[1]=&#39;&#39;;return num;}<br />\r\n<br />\r\n&nbsp;for(int xx = len-1;xx&gt;=0;xx--)<br />\r\n&nbsp;{<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; x[lo++] = num[xx];<br />\r\n&nbsp;}&nbsp;&nbsp;&nbsp;<br />\r\n&nbsp;x[lo]=&#39;&#39;;<br />\r\n&nbsp;strcpy(num,x);<br />\r\n&nbsp;return num;<br />\r\n}<br />\r\n<br />\r\nchar * add(char * a, char * b, char * num)<br />\r\n{<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp; int len1 = strlen(a)-1;<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp; int len2 = strlen(b)-1;<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp; int carry = 0;<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp; int x = 0;<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp; while(len1&gt;=0 &amp;&amp; len2&gt;=0)<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp; {<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; int temp = a[len1--]-&#39;0&#39;+ b[len2--]-&#39;0&#39; + carry;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; num[x++] = temp%10 + &#39;0&#39;;<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; carry = temp/10;<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp; }&nbsp;&nbsp;&nbsp;&nbsp;<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp; while(len1&gt;=0)<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp; {<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; int temp = a[len1--]-&#39;0&#39;+ carry;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; num[x++] = temp%10 + &#39;0&#39;;<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; carry = temp/10;<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp; }<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp; while(len2&gt;=0)<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp; {<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; int temp = b[len2--]-&#39;0&#39;+ carry;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; num[x++] = temp%10 + &#39;0&#39;;<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; carry = temp/10;<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp; }<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp; if(carry&gt;0)<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; num[x++] = carry+&#39;0&#39;;<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp; num[x] = &#39;&#39;;&nbsp;&nbsp;&nbsp;&nbsp;<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp; return reverse(num);<br />\r\n}<br />\r\n<br />\r\nchar * sub(char * a, char * b, char * num)<br />\r\n{<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp; int len1 = strlen(a)-1;<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp; int len2 = strlen(b)-1;<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp; int carry = 0;<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp; int x = 0;int togl = 0;<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp; while(len2&gt;=0)<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp; {<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; int temp;<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if(a[len1]&gt;=b[len2])<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; temp = a[len1] - b[len2];<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; num[x++] = temp + &#39;0&#39;;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; len1--,len2--;<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; else<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; int flag;togl = 1;<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; while(a[len1]&lt;=b[len2])<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if(togl==1){num[x++] = a[len1] - b[len2]+10 +&#39;0&#39;;togl=0;}<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; else {num[x++] = a[len1] - b[len2]+9 +&#39;0&#39;;}<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; len1--,len2--;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if(len2&lt;0)<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {flag=1;break;}&nbsp;&nbsp;<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }&nbsp;&nbsp;&nbsp;<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; while(a[len1]==&#39;0&#39;){num[x++]=&#39;9&#39;;len1--;}<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; num[x++] =&nbsp;&nbsp;&nbsp; a[len1] - (flag==1?&#39;0&#39;:b[len2]) - 1 +&#39;0&#39;;<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; len2--,len1--;<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp; }<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp; while(len1&gt;=0)<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; num[x++]=a[len1--];<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp; num[x]= &#39;&#39;;<br />\r\n<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp; return reverse(num);<br />\r\n}<br />\r\n<br />\r\n<br />\r\nchar * mult(char * a, char * b, char * num)<br />\r\n{<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp; int len1 = strlen(a)-1;<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp; int len2 = strlen(b)-1;<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp; int x=0,carry=0,ll=0,mm=0,prevll=-1;<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp; for(int i=len1;i&gt;=0;i--)<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp; {<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; int mul1 = a[i]-&#39;0&#39;;<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; for(int j=len2;j&gt;=0;j--)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; int mul2 = b[j]-&#39;0&#39;;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; int temp = mul1*mul2 + carry + (mm&lt;=prevll?num[mm]-&#39;0&#39;:0);<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; num[mm++] = temp%10 +&#39;0&#39;;<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; carry = temp/10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if(carry&gt;0)<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {num[mm++]=carry+&#39;0&#39;;<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; carry = 0;}<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; prevll = mm-1;<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ll++;<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if(i==0){num[mm]=&#39;&#39;;break;}<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; mm = ll;<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp; }<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp; return reverse(num);<br />\r\n}<br />\r\n<br />\r\n<br />\r\n<br />\r\nint main()<br />\r\n{<br />\r\n&nbsp;char a[100001], b[100001];<br />\r\n&nbsp;while(cin&gt;&gt;a&gt;&gt;b)<br />\r\n&nbsp;{<br />\r\n&nbsp; //cout&lt; &nbsp; cout&lt; &nbsp; //cout&lt; &nbsp;&nbsp;<br />\r\n&nbsp;}<br />\r\nreturn 0;<br />\r\n}</p>\r\n\r\n<p><strong>Rajesh Kumar (IPG-2010) is currently working as forward deployed software engineer at Palantir Technologies and is a great programmer.</strong></p>\r\n'),
(27, 'Really Fast I/O methods for Programming in C++ (Input Methods)', 'Coding', 'Rajesh Kumar', 'https://assets.entrepreneur.com/content/3x2/1300/20150708172005-coding-working-workspace-apple-macintosh.jpeg', 2, 'juhi', '2018-02-02 16:02:36', '<p>In programming minimizing the runtime of your program is very necessary as the time limit of &nbsp;problems is very strict.</p>\r\n\r\n<p>Many times I have come across the warning &ndash; &ldquo;Be Careful!&nbsp;Large Input Output&quot;.</p>\r\n\r\n<p>In such problems the optimization in the input/output method really helps in giving a better runtime.</p>\r\n\r\n<p>After surfing a lot on the web and reading about the different methods, I made a template for myself, which I use in all my problems and sometimes it help me in getting on the 1st&nbsp;page of best solutions ;)</p>\r\n\r\n<p>&nbsp;You can check all the Fast I/O methods on -</p>\r\n\r\n<p>&nbsp;<a href=\"http://www.spoj.pl/problems/INTEST\">www.spoj.pl/problems/INTEST</a>&nbsp;(Input test)<br />\r\n&nbsp;<a href=\"http://www.spoj.pl/problems/INOUTEST\">www.spoj.pl/problems/INOUTEST</a>&nbsp;(Input + Output Test)<br />\r\n<br />\r\nDue to simplicity most of C++ programmers use cin/cout for the Input/Output.<br />\r\nBut when the testcases are large cin/cout doesn&#39;t work.&nbsp;You can try it on the above problems.<br />\r\nA solution with cin/cout will time out.<br />\r\n<br />\r\nSo one of the alternate is the scanf/printf which is nearly 3 times faster than the cin/cout.<br />\r\nAn Accepted solution of the problem INTEST is<br />\r\n<br />\r\n__________________________________________________________________________________<br />\r\n<br />\r\n<strong>#include&lt;stdio.h&gt;<br />\r\nint main()<br />\r\n{<br />\r\n&nbsp;int n,k;<br />\r\n&nbsp;scanf(&quot;%d%d&quot;,&amp;n,&amp;k);<br />\r\n&nbsp;int cnt=0;<br />\r\n&nbsp;while(n--)<br />\r\n&nbsp;{<br />\r\n&nbsp; int num;<br />\r\n&nbsp; scanf(&quot;%d&quot;,&amp;num);<br />\r\n&nbsp; if(num%k==0)cnt++;&nbsp;<br />\r\n&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;<br />\r\n&nbsp;printf(&quot;%d&quot;,cnt);<br />\r\n&nbsp;return 0;<br />\r\n}</strong><br />\r\n__________________________________________________________________________________<br />\r\nBut its runtime is 5.52 seconds which is not very good.<br />\r\nSo we search for other alternates.<br />\r\n<br />\r\nAnother faster input handling method is the getchar_unlocked().<br />\r\ngetchar_unlocked is thread unsafe as it locks the screen while getting the input.&nbsp;But using it on the spoj server will not harm your screen :D.<br />\r\nIt is easy to implement and is very fast.<br />\r\nWe can use getchar_unlocked to handle integers and strings faster.<br />\r\n<br />\r\nAn Implementation of getting integer input through getchar_unlocked() -<br />\r\nAccepted INTEST Solution&nbsp;<br />\r\n&nbsp;_______________________________________________________________________________<br />\r\n<br />\r\n<br />\r\n<strong>#include&lt;iostream&gt;<br />\r\n#include&lt;cstdio&gt;<br />\r\n#define gc getchar_unlocked<br />\r\n<br />\r\nvoid scanint(int &amp;x)<br />\r\n{<br />\r\n&nbsp;&nbsp;&nbsp; register int c = gc();<br />\r\n&nbsp;&nbsp;&nbsp; x = 0;<br />\r\n&nbsp;&nbsp;&nbsp; for(;(c&lt;48 || c&gt;57);c = gc());<br />\r\n&nbsp;&nbsp;&nbsp; for(;c&gt;47 &amp;&amp; c&lt;58;c = gc()) {x = (x&lt;&lt;1) + (x&lt;&lt;3) + c - 48;}<br />\r\n}<br />\r\n<br />\r\nint main()<br />\r\n{&nbsp;&nbsp;&nbsp;<br />\r\n<br />\r\n&nbsp;&nbsp;&nbsp; int n,k;<br />\r\n&nbsp;&nbsp;&nbsp; scanint(n);<br />\r\n&nbsp;&nbsp;&nbsp; scanint(k);<br />\r\n&nbsp;&nbsp;&nbsp; int cnt=0;<br />\r\n&nbsp;&nbsp;&nbsp; while(n--)<br />\r\n&nbsp;&nbsp;&nbsp; {<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp; int num;<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp; scanint(num);<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp; if(num%k==0)cnt++;&nbsp;<br />\r\n&nbsp;&nbsp;&nbsp; }&nbsp;&nbsp;&nbsp;&nbsp;<br />\r\n&nbsp;&nbsp;&nbsp; printf(&quot;%d&quot;,cnt);<br />\r\n&nbsp;&nbsp;&nbsp; return 0;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br />\r\n}</strong><br />\r\n__________________________________________________________________________________<br />\r\n<br />\r\nAnd the runtime of this solution is&nbsp; 0.90 secs. which is much faster than the scanf.<br />\r\n<br />\r\nRegisters are faster than memory to access, so the variables which are most frequently used in a C program can be put in registers using&nbsp;<em>register&nbsp;</em>keyword.<br />\r\n<br />\r\nThis implementation was for positive integers.&nbsp;Similarly you can make one for the +/- integers.<br />\r\n<br />\r\n___________________________________________________________________________________&nbsp;<br />\r\n<br />\r\n<strong>void scanint(int &amp;x)<br />\r\n{<br />\r\n&nbsp;&nbsp;&nbsp; register int c = gc();<br />\r\n&nbsp;&nbsp;&nbsp; x = 0;<br />\r\n&nbsp;&nbsp;&nbsp; int neg = 0;<br />\r\n&nbsp;&nbsp;&nbsp; for(;((c&lt;48 || c&gt;57) &amp;&amp; c != &#39;-&#39;);c = gc());<br />\r\n&nbsp;&nbsp;&nbsp; if(c==&#39;-&#39;) {neg=1;c=gc();}<br />\r\n&nbsp;&nbsp;&nbsp; for(;c&gt;47 &amp;&amp; c&lt;58;c = gc()) {x = (x&lt;&lt;1) + (x&lt;&lt;3) + c - 48;}<br />\r\n&nbsp;&nbsp;&nbsp; if(neg) x=-x;<br />\r\n}</strong><br />\r\n___________________________________________________________________________________<br />\r\n<br />\r\nSo this is a very easy way to implement fast Input handling method.<br />\r\n<br />\r\nWe have another fast Input method that is - fread or fread_unlocked.<br />\r\nThere isn&#39;t much difference between fread and fread_unlocked as in both the whole input file is first taken in an input buffer and then processed.&nbsp;Main difference is the locking of screen in fread_unlocked.<br />\r\n<br />\r\nImplementaion of fread in INTEST ...<br />\r\n&nbsp;__________________________________________________________________________________<br />\r\n<br />\r\n<strong>#include&lt;cstdio&gt;<br />\r\n#include&lt;iostream&gt;<br />\r\n#include&lt;cstdlib&gt;<br />\r\nusing namespace std;<br />\r\n#define size 65536<br />\r\nint main()<br />\r\n{<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;<br />\r\n&nbsp;&nbsp;&nbsp; char b[size];<br />\r\n&nbsp;&nbsp;&nbsp; int t=0,n,k,cnt=0;<br />\r\n&nbsp;&nbsp;&nbsp; int c,j;<br />\r\n&nbsp;&nbsp;&nbsp; scanf(&quot;%d %d\n&quot;,&amp;n,&amp;k);<br />\r\n&nbsp;&nbsp;&nbsp; while((c = fread(b,1,size,stdin))&gt;0)<br />\r\n&nbsp;&nbsp;&nbsp; {<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; for(j=0;j&lt;c;j++)<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if(b[j]==&#39;\n&#39;)<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if(t%k==0)cnt++;<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; t = 0;<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; else<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; t = (t*10) + (b[j]-&#39;0&#39;);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp; }<br />\r\n&nbsp;&nbsp;&nbsp; printf(&quot;%d\n&quot;,cnt);&nbsp;&nbsp;&nbsp;&nbsp;<br />\r\n&nbsp;&nbsp;&nbsp; return 0;<br />\r\n}</strong><br />\r\n__________________________________________________________________________________<br />\r\n<br />\r\nNow this method is&nbsp; faster as the runtime of this one is 0.65 secs.<br />\r\nUsing fread_unlocked increased the runtime to 0.78 secs.<br />\r\nSo better use fread().<br />\r\n<br />\r\nBut I found getchar_unlocked() much easier to manipulate and code.. So that&#39;s my choice.<br />\r\nThese were few Input methods that I found useful.. For string handling gets() and fgets() are also good.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Rajesh Kumar (IPG-2010) is currently working as forward deployed software engineer at Palantir Technologies and is a great programmer.</strong></p>\r\n');
INSERT INTO `post_table` (`post_id`, `post_title`, `category`, `organiser_name`, `post_image`, `author_id`, `author_username`, `post_time`, `post`) VALUES
(30, 'Using Facebook Graph Search in Python for extracting Page Feeds', 'Technical', 'Rajesh Kumar', 'https://prince2pm.files.wordpress.com/2011/07/technical.jpg', 2, 'juhi', '2018-02-03 11:13:54', '<p>In this example I am using&nbsp;<a href=\"https://github.com/pythonforfacebook/facebook-sdk\">Facebook Python SDK</a>.</p>\r\n\r\n<p>Download the zip file and install it to your system. For using Facebook Graph API you need&nbsp;<a href=\"https://developers.facebook.com/docs/facebook-login/access-tokens\">Access Token</a>.</p>\r\n\r\n<p>Facebook provides both short-term (expires in around 100 minutes) and long-term tokens (60 days). You can get a temporary access token from&nbsp;<a href=\"https://developers.facebook.com/tools/explorer\">Facebook Explorer</a>&nbsp;(Don&#39;t Hesitate in taking all permissions :P). You can check the status of the access token by clicking on the Debug Button.&nbsp;</p>\r\n\r\n<p>If you want to take a long-term token then you will have to create an app on Facebook.&nbsp;</p>\r\n\r\n<p>Go to&nbsp;<a href=\"https://developers.facebook.com/\">Facebook Developers</a>&nbsp;and then click on App-&gt;Create an App. Once you have created an App you will get an App ID and App Secret(Never share it).&nbsp;</p>\r\n\r\n<p>First you will get a short term access token for your app at&nbsp;<a href=\"https://developers.facebook.com/tools/accesstoken/\">Access Token Tools</a>.</p>\r\n\r\n<p>Now to get your long-term access token go to -</p>\r\n\r\n<p>https://graph.facebook.com/oauth/access_token? client_id=APP_ID&amp; client_secret=APP_SECRET&amp; grant_type=fb_exchange_token&amp;&nbsp;</p>\r\n\r\n<p>&nbsp; &nbsp; fb_exchange_token=EXISTING_ACCESS_TOKEN&nbsp;&nbsp;&nbsp;</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>You will get a new access token that will not expire in next 60 days.</p>\r\n\r\n<p>Now to get feeds from a page you need to get its page_id. To get page_id you can just search the source code of the page and you will get it in format - &nbsp;&quot;type&quot;:&quot;ent:page&quot;,&quot;uid&quot;:<strong>344128252278047</strong></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>Code to use Facebook Graph API -</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<pre>\r\nimport facebook\r\ngraph = facebook.GraphAPI(&quot;ACCESS TOKEN&quot;)\r\nstrr = &quot;/v2.0/&quot;+str(PAGE_ID)+&quot;/feed&quot;\r\nprofile = graph.get_object(strr)\r\nprint profile\r\n</pre>\r\n\r\n<p><br />\r\nNow profile will give you the data in JSON format</p>\r\n\r\n<p>You can just use it as python dictionary and go through all the feeds.</p>\r\n\r\n<p>Not all the results are shown on the first page of the results. Instead, Facebook has&nbsp;<a href=\"http://api-portal.anypoint.mulesoft.com/facebook/api/facebook-graph-api/docs/reference/pagination\">Pagination</a>&nbsp;to move along all the result pages.&nbsp;</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>You can just use profile as python dictionary.</p>\r\n\r\n<p>Code to display few details of the feeds -</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<pre>\r\ndef fetch_post(data):\r\n            post_id = str(data[&quot;id&quot;])\r\n            author_id = &quot;-&quot;\r\n            author_name = &quot;-&quot;\r\n            if(&quot;from&quot; in data):\r\n                author_id = str(data[&quot;from&quot;][&quot;id&quot;].encode(&#39;utf-8&#39;, &#39;replace&#39;))\r\n                author_name = str(data[&quot;from&quot;][&quot;name&quot;].encode(&#39;utf-8&#39;, &#39;replace&#39;))\r\n            message = &quot;-&quot;\r\n            if(&quot;message&quot; in data):\r\n                message = str(data[&quot;message&quot;].encode(&#39;utf-8&#39;, &#39;replace&#39;))\r\n            name = &quot;-&quot;\r\n            if(&quot;name&quot; in data):\r\n                name = str(data[&quot;name&quot;].encode(&#39;utf-8&#39;, &#39;replace&#39;))\r\n            caption = &quot;-&quot;\r\n            if(&quot;caption&quot; in data):\r\n                caption = str(data[&quot;caption&quot;].encode(&#39;utf-8&#39;, &#39;replace&#39;))\r\n            source = &quot;-&quot;\r\n            if(&quot;source&quot; in data):\r\n                source = str(data[&quot;source&quot;].encode(&#39;utf-8&#39;, &#39;replace&#39;))\r\n            description = &quot;-&quot;\r\n            if(&quot;description&quot; in data):\r\n                description = str(data[&quot;description&quot;].encode(&#39;utf-8&#39;, &#39;replace&#39;))\r\n            link = &quot;-&quot;\r\n            if(&quot;link&quot; in data):\r\n                link = str(data[&quot;link&quot;].encode(&#39;utf-8&#39;, &#39;replace&#39;))\r\n            cr_time = &quot;-&quot;\r\n            if(&quot;created_time&quot; in data):\r\n                cr_time = str(data[&quot;created_time&quot;].encode(&#39;utf-8&#39;, &#39;replace&#39;))\r\n            up_time = &quot;-&quot;\r\n            if(&quot;updated_time&quot; in data):\r\n                up_time = str(data[&quot;updated_time&quot;].encode(&#39;utf-8&#39;, &#39;replace&#39;))\r\n            shares = &quot;0&quot;\r\n            if(&quot;shares&quot; in data):\r\n                shares = str(data[&quot;shares&quot;][&quot;count&quot;])\r\n            likes = &quot;0&quot;\r\n            if(&quot;likes&quot; in data):\r\n                likes = str(len(data[&quot;likes&quot;][&quot;data&quot;]))\r\n            print &quot;Post-ID: %s&quot; %(post_id)\r\n            print &quot;Author-ID: %s Author-Name: %s&quot; %(author_id,author_name)\r\n            print &quot;Message: %s&quot; %(message)\r\n            print &quot;Name: %s&quot; %(name)\r\n            print &quot;Caption: %s&quot; %(caption)\r\n            print &quot;Source: %s&quot; %(source)\r\n            print &quot;Description: %s&quot; %(description)\r\n            print &quot;Link: %s&quot; %(link)\r\n            print &quot;Created-Time: %s Updated-Time: %s&quot; %(cr_time,up_time)\r\n            print &quot;Shares: %s&quot; %(shares)\r\n            print &quot;Likes: %s&quot; %(likes)\r\n\r\nimport facebook\r\ngraph = facebook.GraphAPI(&quot;ACCESS TOKEN&quot;)\r\nstrr = &quot;/v2.0/&quot;+str(PAGE_ID)+&quot;/feed&quot;\r\nprofile = graph.get_object(strr)\r\n\r\nprint profile\r\nsz = len(profile[&quot;data&quot;])\r\nfor x in range(0,sz):\r\n        if(&quot;id&quot; in profile[&quot;data&quot;][x]):\r\n                details = fetch_post(profile[&quot;data&quot;][x])\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>In this way you can use Facebook Graph API for fetching posts of the Page.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>Here&#39;s the output of the above program for PAGE_ID -&nbsp;344128252278047 (Sachin Tendulkar)<br />\r\n&nbsp;</p>\r\n\r\n<pre>\r\nPost-ID: 344128252278047_792267827464085\r\nAuthor-ID: 344128252278047 Author-Name: Sachin Tendulkar\r\nMessage: Great to meet a former &#39;India&#39; player and a legend.\r\nName: -\r\nCaption: -\r\nSource: -\r\nDescription: -\r\nLink: https://www.facebook.com/SachinTendulkar/photos/a.792251527465715.1073741827.344128252278047/792267740797427/?type=1&amp;relevant_count=1\r\nCreated-Time: 2014-05-28T17:32:03+0000 Updated-Time: 2014-05-29T13:21:28+0000\r\nShares: 1138\r\nLikes: 25\r\nPost-ID: 344128252278047_792251544132380\r\nAuthor-ID: 344128252278047 Author-Name: Sachin Tendulkar\r\nMessage: Happy to be invited as the Goodwill Ambassador for the 35th National Games in Kerala.\r\nName: -\r\nCaption: -\r\nSource: -\r\nDescription: -\r\nLink: https://www.facebook.com/SachinTendulkar/photos/a.792251527465715.1073741827.344128252278047/792251310799070/?type=1&amp;relevant_count=1\r\nCreated-Time: 2014-05-28T16:55:58+0000 Updated-Time: 2014-05-29T13:19:01+0000\r\nShares: 873\r\nLikes: 25\r\nPost-ID: 344128252278047_792025730821628\r\nAuthor-ID: 344128252278047 Author-Name: Sachin Tendulkar\r\nMessage: Just got back from Kerala after a visit regarding our football team in the Indian Super League - Kerala Blasters. The support and enthusiasm of the fans and the leadership was wonderful. The following for the game of football in the state is phenomenal and am sure Kerala Blasters will give all the fans more reason to cheer and further enjoy the beautiful game of  football.\r\nName: -\r\nCaption: -\r\nSource: -\r\nDescription: -\r\nLink: -\r\nCreated-Time: 2014-05-28T07:10:11+0000 Updated-Time: 2014-05-29T13:15:57+0000\r\nShares: 1482\r\nLikes: 25\r\nPost-ID: 344128252278047_791965037494364\r\nAuthor-ID: 344128252278047 Author-Name: Sachin Tendulkar\r\nMessage: People used to call me master blaster. I&#39;m supporting Kerala Kochi team. I hope the entire Kerala will be behind our football team. That&#39;s why we thought of naming it as Kerala Blasters FC\r\nName: -\r\nCaption: -\r\nSource: -\r\nDescription: -\r\nLink: https://www.facebook.com/SachinTendulkar/photos/a.402901949734010.98326.344128252278047/791964920827709/?type=1&amp;relevant_count=1\r\nCreated-Time: 2014-05-28T05:21:46+0000 Updated-Time: 2014-05-29T13:21:19+0000\r\nShares: 6729\r\nLikes: 25\r\nPost-ID: 344128252278047_791463707544497\r\nAuthor-ID: 344128252278047 Author-Name: Sachin Tendulkar\r\nMessage: Practice session at the Wankhede Stadium.\r\nName: -\r\nCaption: -\r\nSource: -\r\nDescription: -\r\nLink: https://www.facebook.com/SachinTendulkar/photos/a.402901949734010.98326.344128252278047/791463687544499/?type=1&amp;relevant_count=1\r\nCreated-Time: 2014-05-27T08:22:05+0000 Updated-Time: 2014-05-29T11:42:08+0000\r\nShares: 2082\r\nLikes: 25\r\nPost-ID: 344128252278047_790873174270217\r\nAuthor-ID: 344128252278047 Author-Name: Sachin Tendulkar\r\nMessage: -\r\nName: -\r\nCaption: -\r\nSource: -\r\nDescription: -\r\nLink: https://www.facebook.com/SachinTendulkar/photos/a.402901949734010.98326.344128252278047/790873134270221/?type=1&amp;relevant_count=1\r\nCreated-Time: 2014-05-26T06:15:29+0000 Updated-Time: 2014-05-29T11:42:15+0000\r\nShares: 3814\r\nLikes: 25\r\nPost-ID: 344128252278047_789877277703140\r\nAuthor-ID: 344128252278047 Author-Name: Sachin Tendulkar\r\nMessage: -\r\nName: -\r\nCaption: -\r\nSource: -\r\nDescription: -\r\nLink: https://www.facebook.com/SachinTendulkar/photos/a.402901949734010.98326.344128252278047/789877204369814/?type=1&amp;relevant_count=1\r\nCreated-Time: 2014-05-24T06:27:39+0000 Updated-Time: 2014-05-29T11:42:22+0000\r\nShares: 4143\r\nLikes: 25\r\nPost-ID: 344128252278047_788296784527856\r\nAuthor-ID: 344128252278047 Author-Name: Sachin Tendulkar\r\nMessage: The first match of my career was not that great. I had sleepless nights as I had failed to score. I finally spoke to my seniors and they advised me not to take pressure and be at ease and in control of my game. That helped me score 58 in my next match. I have not forgotten that advice and share it with every youngster I meet.\r\nName: -\r\nCaption: -\r\nSource: -\r\nDescription: -\r\nLink: https://www.facebook.com/SachinTendulkar/photos/a.402901949734010.98326.344128252278047/788296561194545/?type=1&amp;relevant_count=1\r\nCreated-Time: 2014-05-21T05:53:24+0000 Updated-Time: 2014-05-29T11:42:25+0000\r\nShares: 2249\r\nLikes: 25\r\nPost-ID: 344128252278047_787300977960770\r\nAuthor-ID: 344128252278047 Author-Name: Sachin Tendulkar\r\nMessage: http://bit.ly/1hbHmjn\r\nName: -\r\nCaption: -\r\nSource: -\r\nDescription: -\r\nLink: https://www.facebook.com/SachinTendulkar/photos/a.402901949734010.98326.344128252278047/787300941294107/?type=1&amp;relevant_count=1\r\nCreated-Time: 2014-05-19T07:39:49+0000 Updated-Time: 2014-05-29T11:42:31+0000\r\nShares: 3068\r\nLikes: 25\r\nPost-ID: 344128252278047_786249771399224\r\nAuthor-ID: 344128252278047 Author-Name: Sachin Tendulkar\r\nMessage: British Commonwealth issues legal tender coins in honor of Sachin. View or pre-order on : www.eicgold.com\r\nName: -\r\nCaption: -\r\nSource: -\r\nDescription: -\r\nLink: https://www.facebook.com/SachinTendulkar/photos/a.402901949734010.98326.344128252278047/785889024768632/?type=1&amp;relevant_count=1\r\nCreated-Time: 2014-05-17T05:30:00+0000 Updated-Time: 2014-05-29T06:46:33+0000\r\nShares: 8856\r\nLikes: 25\r\nPost-ID: 344128252278047_785246431499558\r\nAuthor-ID: 344128252278047 Author-Name: Sachin Tendulkar\r\nMessage: Memorable Picture\r\nName: -\r\nCaption: -\r\nSource: -\r\nDescription: -\r\nLink: https://www.facebook.com/SachinTendulkar/photos/a.402901949734010.98326.344128252278047/785237004833834/?type=1&amp;relevant_count=1\r\nCreated-Time: 2014-05-15T05:49:20+0000 Updated-Time: 2014-05-29T11:04:28+0000\r\nShares: 40945\r\nLikes: 25\r\nPost-ID: 344128252278047_783730588317809\r\nAuthor-ID: 344128252278047 Author-Name: Sachin Tendulkar\r\nMessage: Happy Buddha Purnima.\r\nName: -\r\nCaption: -\r\nSource: -\r\nDescription: -\r\nLink: -\r\nCreated-Time: 2014-05-14T04:00:00+0000 Updated-Time: 2014-05-29T10:26:56+0000\r\nShares: 722\r\nLikes: 25\r\nPost-ID: 344128252278047_783742051649996\r\nAuthor-ID: 344128252278047 Author-Name: Sachin Tendulkar\r\nMessage: It&#39;s about not accepting every little challenge thrown at you. Sometimes you hold back and when it&#39;s needed you go for it.\r\nName: -\r\nCaption: -\r\nSource: -\r\nDescription: -\r\nLink: https://www.facebook.com/SachinTendulkar/photos/a.402901949734010.98326.344128252278047/783738561650345/?type=1&amp;relevant_count=1\r\nCreated-Time: 2014-05-12T06:10:17+0000 Updated-Time: 2014-05-29T06:23:06+0000\r\nShares: 4728\r\nLikes: 25\r\nPost-ID: 344128252278047_782458088445059\r\nAuthor-ID: 344128252278047 Author-Name: Sachin Tendulkar\r\nMessage: The match starts much, much earlier than the actual match.\r\nName: -\r\nCaption: -\r\nSource: -\r\nDescription: -\r\nLink: https://www.facebook.com/SachinTendulkar/photos/a.402901949734010.98326.344128252278047/782110831813118/?type=1&amp;relevant_count=1\r\nCreated-Time: 2014-05-10T04:00:00+0000 Updated-Time: 2014-05-29T08:34:29+0000\r\nShares: 1867\r\nLikes: 25\r\nPost-ID: 344128252278047_781472771876924\r\nAuthor-ID: 344128252278047 Author-Name: Sachin Tendulkar\r\nMessage: -\r\nName: -\r\nCaption: -\r\nSource: -\r\nDescription: -\r\nLink: https://www.facebook.com/SachinTendulkar/photos/a.402901949734010.98326.344128252278047/781472655210269/?type=1&amp;relevant_count=1\r\nCreated-Time: 2014-05-08T05:07:38+0000 Updated-Time: 2014-05-29T07:08:59+0000\r\nShares: 6088\r\nLikes: 25\r\nPost-ID: 344128252278047_781042355253299\r\nAuthor-ID: 344128252278047 Author-Name: Sachin Tendulkar\r\nMessage: http://bit.ly/1hbHmjn\r\nName: -\r\nCaption: -\r\nSource: -\r\nDescription: -\r\nLink: https://www.facebook.com/SachinTendulkar/photos/a.402901949734010.98326.344128252278047/781042131919988/?type=1&amp;relevant_count=1\r\nCreated-Time: 2014-05-07T09:18:25+0000 Updated-Time: 2014-05-29T08:56:12+0000\r\nShares: 2275\r\nLikes: 25\r\nPost-ID: 344128252278047_780358695321665\r\nAuthor-ID: 344128252278047 Author-Name: Sachin Tendulkar\r\nMessage: http://bit.ly/1sevIqw\r\nName: -\r\nCaption: -\r\nSource: -\r\nDescription: -\r\nLink: https://www.facebook.com/SachinTendulkar/photos/a.402901949734010.98326.344128252278047/780357431988458/?type=1&amp;relevant_count=1\r\nCreated-Time: 2014-05-06T05:30:53+0000 Updated-Time: 2014-05-28T07:33:13+0000\r\nShares: 5977\r\nLikes: 25\r\nPost-ID: 344128252278047_779887502035451\r\nAuthor-ID: 344128252278047 Author-Name: Sachin Tendulkar\r\nMessage: -\r\nName: -\r\nCaption: -\r\nSource: -\r\nDescription: -\r\nLink: https://www.facebook.com/SachinTendulkar/photos/a.402883266402545.98317.344128252278047/779886642035537/?type=1&amp;relevant_count=1\r\nCreated-Time: 2014-05-05T04:39:39+0000 Updated-Time: 2014-05-27T18:33:27+0000\r\nShares: 874\r\nLikes: 25\r\nPost-ID: 344128252278047_778466455510889\r\nAuthor-ID: 344128252278047 Author-Name: Sachin Tendulkar\r\nMessage: Happy Birthday Brian!\r\nName: -\r\nCaption: -\r\nSource: -\r\nDescription: -\r\nLink: https://www.facebook.com/SachinTendulkar/photos/a.402901949734010.98326.344128252278047/778466282177573/?type=1&amp;relevant_count=1\r\nCreated-Time: 2014-05-02T07:19:25+0000 Updated-Time: 2014-05-29T10:27:46+0000\r\nShares: 8878\r\nLikes: 25\r\nPost-ID: 344128252278047_777709918919876\r\nAuthor-ID: 344128252278047 Author-Name: Sachin Tendulkar\r\nMessage: I always had a dream to play for India but I never let it put pressure on me.\r\nhttp://bit.ly/1hbHmjn\r\nName: -\r\nCaption: -\r\nSource: -\r\nDescription: -\r\nLink: https://www.facebook.com/SachinTendulkar/photos/a.402901949734010.98326.344128252278047/777699385587596/?type=1&amp;relevant_count=1\r\nCreated-Time: 2014-05-01T05:30:00+0000 Updated-Time: 2014-05-29T11:13:00+0000\r\nShares: 4369\r\nLikes: 25\r\nPost-ID: 344128252278047_776701259020742\r\nAuthor-ID: 344128252278047 Author-Name: Sachin Tendulkar\r\nMessage: I celebrated the World Wish Day with Rahul Jediya. Rahul is getting treated for a life threatening disease at the Nair Hospital Mumbai. He wished to meet me above all things he could have asked for. I was glad to spend time with him at my house. Thank you Make-A-Wish Foundation for making his wish a reality.\r\nName: -\r\nCaption: -\r\nSource: -\r\nDescription: -\r\nLink: https://www.facebook.com/SachinTendulkar/photos/a.402901949734010.98326.344128252278047/776324329058435/?type=1&amp;relevant_count=1\r\nCreated-Time: 2014-04-29T03:30:00+0000 Updated-Time: 2014-05-28T15:19:44+0000\r\nShares: 4836\r\nLikes: 25\r\nPost-ID: 344128252278047_776206965736838\r\nAuthor-ID: 344128252278047 Author-Name: Sachin Tendulkar\r\nMessage: SMS &quot;Play&quot; to 51001 or click on http://bit.ly/1pFGUhO to play and win exciting prizes everyday.\r\nName: -\r\nCaption: -\r\nSource: -\r\nDescription: -\r\nLink: https://www.facebook.com/SachinTendulkar/photos/a.402901949734010.98326.344128252278047/776206722403529/?type=1&amp;relevant_count=1\r\nCreated-Time: 2014-04-28T05:35:20+0000 Updated-Time: 2014-05-25T03:53:55+0000\r\nShares: 171\r\nLikes: 25\r\nPost-ID: 344128252278047_776197449071123\r\nAuthor-ID: 344128252278047 Author-Name: Sachin Tendulkar\r\nMessage: Thank you Sushil Kumar. I would also want to thank everyone for their warm heartfelt wishes. They meant a lot to me. \r\nName: Timeline Photos\r\nCaption: Sachin Sir ko Janamdin ki Hardik Shubhkaamnayen. Hum sabke liye aap ek prerna hain.\r\nSource: -\r\nDescription: -\r\nLink: https://www.facebook.com/214438055336512/photos/a.230714137042237.49706.214438055336512/577504559029858/?type=1\r\nCreated-Time: 2014-04-28T05:06:57+0000 Updated-Time: 2014-05-27T15:29:15+0000\r\nShares: 211\r\nLikes: 25\r\nPost-ID: 344128252278047_775769199113948\r\nAuthor-ID: 344128252278047 Author-Name: Sachin Tendulkar\r\nMessage: http://bit.ly/1hbHmjn\r\nName: -\r\nCaption: -\r\nSource: -\r\nDescription: -\r\nLink: https://www.facebook.com/SachinTendulkar/photos/a.402901949734010.98326.344128252278047/775769089113959/?type=1&amp;relevant_count=1\r\nCreated-Time: 2014-04-27T11:44:50+0000 Updated-Time: 2014-05-28T11:08:05+0000\r\nShares: 3602\r\nLikes: 25\r\nPost-ID: 344128252278047_774563225901212\r\nAuthor-ID: 344128252278047 Author-Name: Sachin Tendulkar\r\nMessage: The #WeAreSachin was a fantastic initiative by Toshiba to connect with my fans and a big thanks to everyone for making me a part of this world record. Watch mosaic here: http://bit.ly/sachincollage\r\nName: -\r\nCaption: -\r\nSource: -\r\nDescription: -\r\nLink: https://www.facebook.com/SachinTendulkar/photos/a.402901949734010.98326.344128252278047/774563172567884/?type=1&amp;relevant_count=1\r\nCreated-Time: 2014-04-25T04:08:20+0000 Updated-Time: 2014-05-27T05:22:16+0000\r\nShares: 2739\r\nLikes: 25</pre>\r\n\r\n<p><strong>Rajesh Kumar (IPG-2010) is currently working as forward deployed software engineer at Palantir Technologies and is a great programmer.</strong></p>\r\n'),
(29, 'Fast Euler Totient Function in C++', 'Coding', 'Rajesh Kumar', 'https://assets.entrepreneur.com/content/3x2/1300/20150708172005-coding-working-workspace-apple-macintosh.jpeg', 2, 'juhi', '2018-02-02 16:14:43', '<p>Euler Totient Function or phi(n) gives the Number. of numbers less than or equal to n which are relatively prime to n. Some Postulates of Euler totient Function are -</p>\r\n\r\n<p>phi(p) = p-1 ; if p is a prime ;<br />\r\nphi(p^n) = (p-1) * p^(n-1) ; still if p is a prime..<br />\r\nphi(a*b) = phi(a) * phi(b) whenever gcd(a,b) = 1</p>\r\n\r\n<p>Read ETF in detail from&nbsp;<a href=\"http://en.wikipedia.org/wiki/Euler%27s_totient_function\">http://en.wikipedia.org/wiki/Euler%27s_totient_function</a><br />\r\n<br />\r\nNow an easy but slow implementation will be to prime factorize N and then apply phi(p^n) formula to all the prime factors in prime factorization of N.<br />\r\n<br />\r\nLet N = p1^e1 * p2^e2 *..... pn^en<br />\r\nThen<br />\r\nphi(N) = phi(p1^e1) * phi(p2^e2) * ... phi(pn^en)<br />\r\nphi(N) = ((p1 - 1) * (p1 ^ e1 - 1)) * ((p2 - 1) * (p2 ^ (e2 - 1))) * ((pn - 1) * (pn ^ (en - 1)))<br />\r\n<br />\r\nImplementation of this one is -</p>\r\n\r\n<pre>\r\n#include&lt;iostream&gt;\r\n#include&lt;cmath&gt;\r\nusing namespace std;\r\n\r\nlong long int phi(long long x)\r\n {\r\n   long long int ret = 1,i,pow;\r\n   for (i = 2; x != 1; i++) \r\n   {\r\n     pow = 1;\r\n     if(i&gt;sqrt(x))break;\r\n     while (!(x%i)) \r\n     {\r\n       x /= i;\r\n       pow *= i;\r\n     }\r\n     ret *= (pow - (pow/i));\r\n    }\r\n    if(x!=1)ret*=(x-1);\r\n    return ret;\r\n}\r\n\r\nint main()\r\n{\r\n    int t;\r\n    cin&gt;&gt;t;\r\n    while(t--)\r\n    {\r\n           int n;\r\n           cin&gt;&gt;n;\r\n           cout&lt;&lt;phi(n)&lt;&lt;endl;   \r\n    }\r\n    return 0;\r\n}&nbsp;</pre>\r\n\r\n<pre>\r\n\r\n&nbsp;</pre>\r\n\r\n<p>Complexity of this Solution is <strong>O(T * sqrt(N))</strong> as T can be maximum 10^3 and N &lt;= 10^6<br />\r\nso overall complexity of this solution is O(10^6) which will not time out.<br />\r\nBut there exists many better and faster implementation of the Euler Totient Function by using sieve.<br />\r\n<br />\r\nI will discuss both&nbsp;of them -</p>\r\n\r\n<p>First implementation -</p>\r\n\r\n<p>In first implementation using sieve we will keep one of the prime factors of the numbers from 1 to N in the array.<br />\r\ni.e prime[10] = 5, prime[14] = 7, prime[31] = 31 (prime array will contain one of the prime factor of the Number.)<br />\r\nNow when we will get a value N, we can factorize it in O(Number of prime factors)..<br />\r\nNow for a range [1,10^6] the maximum value Number of prime factors can get is &lt;20 (as 2^20&nbsp; = 10^6)<br />\r\nSo after performing the sieve we can compute phi[n] in O( T * number of prime factors of N ).<br />\r\n<br />\r\nImplementation of the above sieve -<br />\r\n&nbsp;</p>\r\n\r\n<pre>\r\n#include&lt;iostream&gt;\r\n#define N 1000000\r\n#include&lt;cmath&gt;\r\n#include&lt;cstdio&gt;\r\nusing namespace std;\r\nint prime[N+1];\r\n \r\nvoid sieve(){\r\n    prime[0]=1;\r\n    prime[1]=1;\r\n    for(long long i=2;i&lt;=N;i++){\r\n        if(!prime[i]){\r\n                        prime[i]=i;\r\n            for(long long j=i;j*i&lt;=N;j++){\r\n                prime[j*i]=i;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nlong long int primeFactorize(int n){\r\n    long long int yy=1;\r\n    for( ; n &gt; 1 ; ){\r\n        int p = prime[n] , e = 0 ;\r\n        for( ; n % p == 0 ; n /= p , e++ ) ;  \r\n        yy*= ((p-1)*(pow((double)p,e-1)));\r\n    }\r\n    return yy;\r\n}\r\n\r\n\r\nint main()\r\n{\r\n   sieve();\r\n   int t;\r\n   scanf(&quot;%d&quot;,&amp;t);\r\n   while(t--)\r\n   {\r\n    int n;\r\n    scanf(&quot;%d&quot;,&amp;n);\r\n    long long int ll = primeFactorize(n);\r\n    printf(&quot;%lld\n&quot;,ll);              \r\n   } \r\n    \r\n   return 0;\r\n}</pre>\r\n\r\n<pre>\r\n&nbsp;\r\n</pre>\r\n\r\n<p>In the second implementation we are going to precompute all the values of phi[n].<br />\r\nIt must be implemented when the number of testcases are high. Because after precomputation, the time required to answer the query becomes O(1).<br />\r\nBut in precomputation the time required is O(nloglogn).<br />\r\nIn this sieve we again perform standard sieve by combining the result of phi of earlier values relatively prime to current value.. and updating phi with the primes stored in an array..<br />\r\n<br />\r\nHere is the implementation of the second Sieve -</p>\r\n\r\n<pre>\r\n\r\n&nbsp;</pre>\r\n\r\n<pre>\r\n#include&lt;iostream&gt;\r\n#include&lt;vector&gt;\r\n#include&lt;cmath&gt;\r\n#include&lt;cstdio&gt;\r\nusing namespace std;\r\n\r\n#define N 1000000\r\n#define MAXN 1000000\r\nint phi[MAXN + 1], prime[MAXN/10], sz=0;\r\nvector&lt;bool&gt; mark(MAXN + 1);\r\n\r\nint main()\r\n{\r\n    \r\n   phi[1] = 1; \r\n   for (int i = 2; i &lt;= MAXN; i++ ){\r\n    if(!mark[i]){\r\n        phi[i] = i-1;\r\n        prime[sz++]= i;\r\n    }\r\n    for (int j=0; j&lt;sz &amp;&amp; prime[j]*i &lt;= MAXN; j++ ){\r\n        mark[prime[j]*i]=1;\r\n        if(i%prime[j]==0){\r\n            int ll = 0;int xx = i;\r\n            while(xx%prime[j]==0)\r\n            {\r\n                           xx/=prime[j];\r\n                           ll++;         \r\n                       }\r\n            int mm = 1;\r\n            for(int k=0;k&lt;ll;k++)mm*=prime[j];\r\n            phi[i*prime[j]] = phi[xx]*mm*(prime[j]-1);\r\n            break;\r\n    }\r\n        else phi[i*prime[j]] = phi[i]*(prime[j]-1 );\r\n    }\r\n}\r\n   int t;\r\n   scanf(&quot;%d&quot;,&amp;t);\r\n   while(t--)\r\n   {\r\n    int n;\r\n    scanf(&quot;%d&quot;,&amp;n);\r\n    printf(&quot;%d\n&quot;,phi[n]);             \r\n   } \r\n   return 0;    \r\n}&nbsp;</pre>\r\n\r\n<pre>\r\n\r\n&nbsp;</pre>\r\n\r\n<p>All of this will get more clear by having a look at-<br />\r\n1. Multiplicative Function<br />\r\n2. Sieve of Erasthothenes<br />\r\n<br />\r\nQuestions to Try -<br />\r\n<a href=\"https://www.spoj.com/problems/ETF/\">https://www.spoj.com/problems/ETF/</a><br />\r\n<a href=\"https://www.spoj.com/problems/DCEPCA03/\">https://www.spoj.com/problems/DCEPCA03/</a></p>\r\n\r\n<p><strong>Rajesh Kumar (IPG-2010) is currently working as forward deployed software engineer at Palantir Technologies and is a great programmer.</strong></p>\r\n'),
(32, 'Blockchains', 'Technical', 'Shubham Shukla', 'https://prince2pm.files.wordpress.com/2011/07/technical.jpg', 2, '', '2018-04-14 15:46:49', '<p><strong>The brainchild of <a href=\"https://en.wikipedia.org/wiki/Satoshi_Nakamoto\">Satoshi Nakamoto</a> , Blockchains is &nbsp;a concept which was initially proposed with a cryptocurrency, but has now grown leaps and bounds. The fact that &ldquo;Satoshi Nakamoto&rdquo; till date remains a pseudonym , depicts the power of blockchains. &nbsp;</strong></p>\r\n\r\n<p><strong>The main concept of blockchains is it keeps information distributed. There is no concept of a central database in this technology. Everyone knows everything, and each monitors that others don&rsquo;t manipulate the data, thus ensuring &nbsp;data integrity.</strong></p>\r\n\r\n<p><strong>Please make a note that cryptocurrency use Blockchains (they are an application), but they are not the concept. Blockchain is an independent concept which has many many applications.</strong></p>\r\n\r\n<p><strong>I would like to give an example of Google Docs here.</strong></p>\r\n\r\n<p><strong>What happens when people write on the same doc?</strong></p>\r\n\r\n<p><strong>With traditional text editors users need to transfer the documents back and forth, losing time, energy and likely losing track of the versions. </strong></p>\r\n\r\n<p><strong>With Google Docs, instead, all the users involved have access to the same document at the same time, and that document together with the updates are always visible real-time to each of them.</strong></p>\r\n\r\n<p><strong>The same thing happens with the Blockchain compared to traditional databases. There is a ledger, everyone in network pushes it&rsquo;s changes to the ledger. Miners verify the data and a block is appended to the chain of previous blocks (BlockChain). </strong></p>\r\n\r\n<p><strong>Before adding more to the concept let&rsquo;s build some basic data structures which we need for implementing Blockchains.</strong></p>\r\n\r\n<p><strong>Hash Pointers:</strong></p>\r\n\r\n<p><strong>Simply, a hash pointer is a kind of data structure that contains two parts</strong></p>\r\n\r\n<ul>\r\n	<li>\r\n	<p><strong>pointer to where some info is stored</strong></p>\r\n	</li>\r\n	<li>\r\n	<p><strong>(cryptographic) hash of the info</strong></p>\r\n	</li>\r\n</ul>\r\n\r\n<p><strong>(Smells like a node of &nbsp;Linked List) .<br />\r\nOk so why hash?&nbsp; For those who still are wondering what a hash is, it is a simple and one way encryption of a text of variable size to a fixed size encrypted code calles Hash. Let&#39;s examine the terms I used here :<br />\r\nOne-way hash : &nbsp;Given text you can encrypt to find the hash, but you can&#39;t do the reverse of it, given hash you can&rsquo;t decrypt it to get back text.<br />\r\nFixed Size: No matter the input size of text is, output remains of fixed size. The size of Hash is fixed.<br />\r\n<br />\r\nHow does hash pointer helps us?&nbsp;We can verify easily if the data a pointer &nbsp;points to has changed or not. Just hash the data and check if it is the same as the hash in pointer. </strong></p>\r\n\r\n<p><strong><img alt=\"\" height=\"154\" src=\"https://lh3.googleusercontent.com/Dfbmyb9pk4m7EhncaSr3o4UiIb4CLOVv9lhMwAF4c6_ATWnMkA_f3sRBV_kl4XZRaPdsZwTHcgzosvEov3YEo9WAJfgYglaon3gA8MuL9Lx9gR3i3bxC8GdjtMdLsx0ykg-5Jpwn\" width=\"290\" /></strong></p>\r\n\r\n<p><strong>&nbsp; Hash Pointer</strong></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Now let&rsquo;s build some data structures using hash pointer:</strong></p>\r\n\r\n<p><strong>Linked List with Hash Pointer (Blockchain)</strong><br />\r\n<strong>Yes this very Data Structure is called Blockchain.</strong></p>\r\n\r\n<p><strong>A simple &nbsp;linked list is a data structure in which the objects are arranged in a linear order. One node holds some data and address of next node. &nbsp;</strong></p>\r\n\r\n<p><strong>In a blockchain, the pointer is replaced by hash pointer. So along with address you also maintain the hash of the data of node current node is pointing to.</strong></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong><img alt=\"\" height=\"273\" src=\"https://lh4.googleusercontent.com/JGe9EY6qAmMVT0Fl4DScEZ0PFqOlCFpBuchyB3V-wzSWjp-t-A9HWWYhsefSG8uwWf_1KE6dGlaphpqeHj8TMlvGtBL7QXgcJIZ4eZxTOmaWW8sEn-zyj2ioPX8qEDslOdbvQ2_Z\" width=\"602\" /></strong></p>\r\n\r\n<p><strong>Blockchain</strong></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Advantage &nbsp;blockchain has over has simple linked lists ? &nbsp;Answer is Temper Evidence.<br />\r\nNow since you have hash of all the nodes, any changes made to the nodes can easily be detected by comparing original hashes and computing new hashes.</strong></p>\r\n\r\n<p><strong>Suppose an adversary tries to mess up with data of block one shown in figure.</strong></p>\r\n\r\n<p><strong><img alt=\"\" height=\"280\" src=\"https://lh6.googleusercontent.com/iGastm1Ed9Uia6doXEkOHCurnAGcOCyyYAabTsxqoxY2U_t5szv0C93CAJYWRcdbYso99xmFwlgTEFpfICiXBB12k2coYN3F6TcCbV9KOZA4da2ZYfn1dXjv_jNf2XCqoFEtQT8Y\" width=\"602\" /></strong></p>\r\n\r\n<p><strong>&nbsp; Block 1 -&gt;&nbsp;Block 2 -&gt;&nbsp;Block 3</strong><br />\r\n&nbsp;</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Hash of Block 2 can be used to verify the data of block 1. Now let us suppose he also changes the hash of Block 2 (figure below). &nbsp;In that case, since contents of Block 2 have been changed Hash of Block 3 shall work as counter check. Now one question that arises here is, what id he changes all the hashes throughout the blockchain ?? He can definitely get a blockchain in the very form he wants. Please ponder over it, and we shall discuss more about it in comment section. </strong></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong><img alt=\"\" height=\"281\" src=\"https://lh4.googleusercontent.com/wrMT9HvuS4OZ4AB2WJ2kUaNWjc109Q2gepjbV5d-5c-SjOtcSzl8bij_tbLhgduc-bvWGdtyIW1lgMsadZ6ZrllvlWbKiKa-aGgwn4crFSvWrMLYewbJRhsUZ1r6Oe7flP2t1LFG\" width=\"602\" /></strong><br />\r\n<br />\r\n<br />\r\n<strong>&nbsp;Binary tree with hash pointer (Merkle Tree)</strong></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>One more very powerful data structures we make using nodes is Binary Tree. We just replace normal nodes with has pointers and get a Merkle Tree. </strong></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong><img alt=\"\" height=\"295\" src=\"https://lh3.googleusercontent.com/3o2loULI2pSP__LWuWmGj3bhU0hdm99N8JgvdyoAE3gJengHnIkThnsoeoILBMLGztt8V7o4s7QQg6khblw4IJdP5sC4w3ziq0xg6cNA3OiRiX9cPB5zr4soCL1FV5zAF1QumbwA\" width=\"602\" /></strong></p>\r\n\r\n<p><strong>&nbsp;Merkle Tree</strong></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>This data structure does all things that a blockchain can do, but considerably reduces the complexity from linear to log . &nbsp;Every node now has two hasp pointers, pointing to left and right child.<br />\r\nTo verify data integrity we just have to match the hash data of a node with it&rsquo;s parent&rsquo;s hash. Thus at max it takes O(Log n) time. <img alt=\"\" height=\"340\" src=\"https://lh5.googleusercontent.com/0BkR2AJzC9GHuuDr_Zf5rIw0vBQCzBavXJfyGssr4PEaO35Q_PkHhwqQGoiziUx5a8TnC5t-yN8MJs3_5DBEvxD4agcMg93mYZoel50f9Db_uqdEWIb7ofjBjODhrenau5n2qRhk\" width=\"602\" /></strong></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Conclusion<br />\r\nSo this is it for this part of the series, it is going to be a long series this, with 5-6 articles, and we shall conclude by making a real time app.<br />\r\nPlease note that each of the subtopic i wrote about is a huge topic of research. Even 10 more blogs like this are not enough to go in depths. Also the images i have used have been shamelessly copied from google. ( I was not going to make them, anyways i suck at it :p ).<br />\r\n<br />\r\nFor any queries mail me at <a href=\"mailto:unishubh1@gmail.com\">unishubh1@gmail.com</a> </strong></p>\r\n\r\n<p>&nbsp;</p>\r\n'),
(33, 'Coffee Shop Sales Executive ChatBot', 'Technical', 'Shubhankar Mohan', 'https://prince2pm.files.wordpress.com/2011/07/technical.jpg', 2, '', '2018-04-05 17:03:12', '<p><strong>Chatbot</strong></p>\r\n\r\n<p>A chatbot is a software system, which can interact or &ldquo;chat&rdquo; with a human user in natural language (such as English, or whatever other language the chatbot has been built on).</p>\r\n\r\n<p>Chatbots can help inform a user, or help them with fulfilling a task.&nbsp;</p>\r\n\r\n<p><strong>Different approaches to making a Chatbot</strong></p>\r\n\r\n<ul>\r\n	<li>\r\n	<p><strong>Rule Based</strong></p>\r\n	</li>\r\n</ul>\r\n\r\n<p>In a rule-based approach, a bot answers questions based on some rules on which it is&nbsp;trained on. The rules defined can be very simple to very complex. One of such language&nbsp;is AIML (Artificial Intelligence Markup Language). Also, writing rules for different&nbsp;scenarios is very time taking and it is impossible to write rules for every possible&nbsp;scenario. The bots can handle simple queries but fail to manage complex queries.&nbsp;A simple rule based chatbot can be constructed using basic NLP and making sense of&nbsp;query by looking in words used in it and keeping in mind nature of sentence and person&nbsp;in which it is.</p>\r\n\r\n<ul>\r\n	<li>\r\n	<p><strong>Sequence to Sequence Models</strong></p>\r\n	</li>\r\n</ul>\r\n\r\n<p>Sequence To Sequence model is one of the strongest Deep NLP techniques available,&nbsp;used commonly in Translation, Question-Answering systems and&nbsp;Chatbots.&nbsp;It consists of two RNNs (Recurrent Neural Network): An Encoder and a Decoder. The&nbsp;encoder takes a sequence (sentence) as input and processes one symbol(word) at each&nbsp;timestep. Its objective is to convert a sequence of symbols into a fixed size feature&nbsp;vector that encodes only the important information in the sequence while losing the unnecessary information. You can visualize data flow in the encoder along the time axis,&nbsp;as the flow of local information from one end of the sequence to another.</p>\r\n\r\n<p>There are quite a few challenges in using this model.</p>\r\n\r\n<ol>\r\n	<li>\r\n	<p>The model cannot handle variable length sequences.</p>\r\n	</li>\r\n	<li>\r\n	<p>Vocabulary size: - The decoder has to run softmax over a large vocabulary of say 20,000 words, for each word in the output. That is going to slow down the training process, even if your hardware is capable of handling it.</p>\r\n	</li>\r\n	<li>\r\n	<p>The biggest problem is that it requires a large amount of data to train it on. And for specific problems like the one give &ldquo;Coffee Shop Sales Executive&rdquo;, its very difficult to get that amount to data to train our model. But once done it gives very good results.</p>\r\n	</li>\r\n</ol>\r\n\r\n<ul>\r\n	<li>\r\n	<p><strong>Dynamic Memory Networks</strong></p>\r\n	</li>\r\n</ul>\r\n\r\n<p>A Dynamic Memory Network (DMN) is a neural network architecture optimized for question-answering (QA) problems. Given a training set of input sequences (knowledge)&nbsp;and questions, it can form episodic memories, and use them to generate relevant&nbsp;answers.&nbsp;Whilst classic Encoder-Decoder (Seq2Seq) models can solve QA problems, their&nbsp;performance is limited by the small size of their &lsquo;memory&rsquo; - this is what&rsquo;s encoded by&nbsp;their hidden states and weights, and reflects the information that&rsquo;s passed between&nbsp;encoder and decoder. This limitation becomes especially apparent when dealing with very long sequences of data, as we might find in sources like books or videos, where the&nbsp;salient facts might occur a long time apart in very different contexts.</p>\r\n\r\n<p>The problem here also lies with large data required to train model, but it is&nbsp;most efficient&nbsp;model till date.</p>\r\n\r\n<p><strong>Backend Architecture</strong></p>\r\n\r\n<p>Databases of all the customers need to be maintained on server storing their order history,&nbsp;which will be used to predict the order of customer when it arrives.&nbsp;For each customer, mobile number can be taken as unique attribute and used for indexing. So&nbsp;User profile will store:</p>\r\n\r\n<ul>\r\n	<li>\r\n	<p>Mobile Number(primary key)</p>\r\n	</li>\r\n	<li>\r\n	<p>Name</p>\r\n	</li>\r\n	<li>\r\n	<p>Sex</p>\r\n	</li>\r\n	<li>\r\n	<p>Age</p>\r\n	</li>\r\n	<li>\r\n	<p>Preference of coffee</p>\r\n	</li>\r\n</ul>\r\n\r\n<p>The prediction can be done in two ways:</p>\r\n\r\n<p><strong>1. Statistical</strong></p>\r\n\r\n<p>Maintaining the count of different types of coffees purchased with their counts,&nbsp;updating on every order. The prediction will be simply coffee with max count.</p>\r\n\r\n<p><strong>2. ML Based</strong></p>\r\n\r\n<p>An ML&nbsp;based system can be maintained to predict the next order of customer based on&nbsp;its historical data. It will be more accurate and can account more parameters than&nbsp;simply count.</p>\r\n\r\n<p>Keeping things less complicated we can store following parameters for each order (for multiple orders, store each order as separate entry):</p>\r\n\r\n<ul>\r\n	<li>\r\n	<p>Timestamp (just of indexing)</p>\r\n	</li>\r\n	<li>\r\n	<p>Time of Day</p>\r\n	</li>\r\n	<li>\r\n	<p>Day of week</p>\r\n	</li>\r\n	<li>\r\n	<p>Weather (Simply cold, hot, warm, rainy)</p>\r\n	</li>\r\n	<li>\r\n	<p>Store ID(purchased from which store)</p>\r\n	</li>\r\n	<li>\r\n	<p>Coffee Name (to be trained for and predicted)</p>\r\n	</li>\r\n</ul>\r\n\r\n<p>A similar system can be used to predict coffee for a new customer based on age, sex, weather,&nbsp;day time.</p>\r\n\r\n<p><strong>API:</strong></p>\r\n\r\n<p>GET /ChatBot(sentence): call be made from user interface when user enters a query.&nbsp;Returns Response to sentence.</p>\r\n\r\n<p>The following API calls will be used to send and receive data from database. These will be made from inside the chatbot script when encountered with particular type of response</p>\r\n\r\n<p>from user.</p>\r\n\r\n<ul>\r\n	<li>\r\n	<p>GET /prefered(mobile_number)</p>\r\n	</li>\r\n	<li>\r\n	<p>Return preferred coffee</p>\r\n	</li>\r\n	<li>\r\n	<p>POST /Create_user(user_data): makes a new user entry.</p>\r\n	</li>\r\n	<li>\r\n	<p>POST /order place(mobile_number, coffee): update user purchase data</p>\r\n	</li>\r\n	<li>\r\n	<p>GET /menu: Send json of menu. May be required at initialization of bot. Return menu</p>\r\n	</li>\r\n</ul>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Frontend</strong></p>\r\n\r\n<p>The front can be a simple UI chat panel. It will take a query form user and send to server to get&nbsp;a response and display the response on same. The bot can be made to chat on FB on page so that customers can place orders or on coffee house&rsquo;s own site. I didn&rsquo;t have&nbsp;a https server so I was&nbsp;not able to make Facebook App, so I have a created a basic form type UI for conversation and testing.</p>\r\n\r\n<p><strong>Approach</strong></p>\r\n\r\n<p><strong>Best Possible Approach:</strong></p>\r\n\r\n<p>The best approach for making any sort of chatbot as already mentioned earlier will be use&nbsp;Sequence to Sequence network or Dynamic Memory Network and train them on long conversation so that they can learn to talk. The only problem is data gathering. This can be solved with Data Generation Algorithms, which in turn again is a problem in its own.</p>\r\n\r\n<p><strong>Rule Based Approach:</strong></p>\r\n\r\n<p>If not provided with sufficient data to apply Deep NLP we can use Traditional NLP to create a rule based chatbot. As name suggests Rule based bot simply tries to map the query of user with one the conditions and then respond with an already defined response for that particular&nbsp;condition.</p>\r\n\r\n<p>The Rules can vary from very simple like:</p>\r\n\r\n<p>If: name of coffee present then,</p>\r\n\r\n<p>place order for that coffee</p>\r\n\r\n<p>To little complex like:</p>\r\n\r\n<p>If: name of coffee present then,</p>\r\n\r\n<p>look for whether it&rsquo;s a question, query or order and then respond accordingly</p>\r\n\r\n<p>The Basic Components will be following:</p>\r\n\r\n<p>1. Classification Module</p>\r\n\r\n<p>Tanning a full chat using ML/DL is not possible because of data restrictions but a&nbsp;small model can be trained to classify &ldquo;Question&rdquo;, &ldquo;Negative&rdquo;, &ldquo;Positive&rdquo;, &ldquo;Request&rdquo;,&nbsp;&ldquo;Acceptance&rdquo;, and &ldquo;Rejection&rdquo;. So this is initially specified what customer is trying to convey. Then for each category query can be treated differently.</p>\r\n\r\n<p>2. Presence of Coffee name in query</p>\r\n\r\n<ul>\r\n	<li>\r\n	<p>If yes then,</p>\r\n	</li>\r\n</ul>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Separate all coffee with their respective counts</p>\r\n\r\n<ul>\r\n	<li>\r\n	<p>If cost related words are present then,</p>\r\n	</li>\r\n</ul>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Separate all coffee and tell prices separately</p>\r\n\r\n<p>3. Presence of menu or menu related words in query</p>\r\n\r\n<p>4. Presence of cost or cost related words. Each of modules from 2 to 4, can then decide response based on classification done&nbsp;by module 1. Also person of sentence can be used:</p>\r\n\r\n<p>I &nbsp;saying to computer and it&rsquo;s about the user</p>\r\n\r\n<p>You &nbsp;asking computer to respond</p>\r\n\r\n<p>Considering all these basic conversation can be achieved.</p>\r\n\r\n<p><strong>Past State:</strong></p>\r\n\r\n<p>The response also depends upon last question or answer. Like consider</p>\r\n\r\n<p>Computer: Anything else sir,</p>\r\n\r\n<p>Response: No thanks or Yes</p>\r\n\r\n<p>The response of user will be basically yes or no, or their variants, so next output will be effected&nbsp;by this yes or no like,</p>\r\n\r\n<p>For Yes &nbsp;What sir</p>\r\n\r\n<p>For No &nbsp;Thank you</p>\r\n\r\n<p>Response can be classified with help of Module 1, but a state full system needs to be made. Apart from menu or price the user may ask about details of a particular coffee, may ask sales person to suggest something or ask for specialty and in end may ask for bill.</p>\r\n\r\n<p>To make bot personalize for user:</p>\r\n\r\n<ul>\r\n	<li>\r\n	<p>We can fetch user name, and use it in conversation</p>\r\n	</li>\r\n	<li>\r\n	<p>Fetch gender and use sir or ma&rsquo;am</p>\r\n	</li>\r\n</ul>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Approach Followed</strong></p>\r\n\r\n<p>I have tried to cover most of the points to a certain extent, but haven&rsquo;t made the classification&nbsp;module so instead I have used TextBlob&rsquo;s inbuilt sentiment analysis and tried to classify other classes of sentences by searching for most common words belonging to that particular class.&nbsp;My approach is stateless so It can&rsquo;t be used to place two different orders at same time thought any number of coffees can be ordered in one go. This also forces to mention coffee name each time, this can be solved by maintaining a history of last suggestion/order made by bot and use&nbsp;that in case a Number is followed by it.&nbsp;The different decisions points are mentioned in code, to make it easily understandable. Also&nbsp;logs of conversations are also being stored, so that it can be used later for improving system.&nbsp;</p>\r\n\r\n<p><strong>Personalizing Bot for User</strong></p>\r\n\r\n<p>The bot used randomly chosen phases to reply in general cases, the responses vary depending&nbsp;the query is first person or second and so response is set accordingly. If we know gender of user then use of sir/ma&rsquo;am will make it more soft talker. Prediction and recommendation (mentioned above) will make bot more personalized for users.</p>\r\n\r\n<p>&nbsp;</p>\r\n');

-- --------------------------------------------------------

--
-- Table structure for table `stud_details`
--

CREATE TABLE `stud_details` (
  `id` int(11) NOT NULL,
  `user_name` varchar(50) NOT NULL DEFAULT '',
  `password` varchar(250) NOT NULL DEFAULT '',
  `pic` varchar(100) NOT NULL DEFAULT 'http://vvcexpl.com/wordpress/wp-content/uploads/2013/09/profile-default-male.png',
  `display_name` varchar(50) NOT NULL DEFAULT '',
  `parent_email` varchar(50) NOT NULL,
  `password_reset_token` int(255) NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Dumping data for table `stud_details`
--

INSERT INTO `stud_details` (`id`, `user_name`, `password`, `pic`, `display_name`, `parent_email`, `password_reset_token`) VALUES
(7, 'ipg_2016001', '$2y$10$yLYSV7aZAnpdkfLEJB6A2.t/FLN3Z4GLX0d4n21MVsbH17dQx62Yy', 'shivam.jpg', 'Aarti Chauhan', 'shivamrathore307@gmail.com', 0),
(8, 'ipg_2016002', '$2y$10$583weVH7fF7W7C9hbw8/IOe04LnML1zQP2L05pY1gOfOYkgSmkPb.', 'pic2.jpg', 'Juhi Tiwari', 'tjuhi.321@gmail.com', 0),
(9, 'ipg_2016003', '$2y$10$2qdRvqZ.bmEcrlR62McxUuV/9/GFViGB2drV1AkdwRh2KNuRU3vWm', 'profile.jpg', 'Shivam Rathore', 'shivamrathore307@gmail.com', 0),
(10, 'ipg_2016004', '$2y$10$QPEqjB4u0ISW/nfICwdEcOFdiudE6FGbi7VAg1Gxp2v4q8/d.VyMK', '15380336_1545121082170484_489374654571956097_n.jpg', 'Swarup Padhy', 'tjuhi.321@gmail.com', 0);

-- --------------------------------------------------------

--
-- Table structure for table `stud_events`
--

CREATE TABLE `stud_events` (
  `id` int(100) NOT NULL,
  `user_name` varchar(50) NOT NULL,
  `score` int(100) NOT NULL DEFAULT '0',
  `tech` int(100) DEFAULT '0',
  `managerial` int(100) NOT NULL DEFAULT '0',
  `literary` int(100) NOT NULL DEFAULT '0'
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Dumping data for table `stud_events`
--

INSERT INTO `stud_events` (`id`, `user_name`, `score`, `tech`, `managerial`, `literary`) VALUES
(1, 'ipg_2016001', 75, 25, 10, 20),
(2, 'ipg_2016002', 50, 25, 15, 10),
(3, 'ipg_2016003', 80, 30, 30, 20),
(4, 'ipg_2016004', 85, 25, 16, 24);

--
-- Indexes for dumped tables
--

--
-- Indexes for table `admin_details`
--
ALTER TABLE `admin_details`
  ADD PRIMARY KEY (`id`);

--
-- Indexes for table `author`
--
ALTER TABLE `author`
  ADD PRIMARY KEY (`author_id`);

--
-- Indexes for table `calendar`
--
ALTER TABLE `calendar`
  ADD PRIMARY KEY (`id`),
  ADD UNIQUE KEY `id` (`id`);

--
-- Indexes for table `comment`
--
ALTER TABLE `comment`
  ADD PRIMARY KEY (`comment_id`);

--
-- Indexes for table `events`
--
ALTER TABLE `events`
  ADD PRIMARY KEY (`id`);

--
-- Indexes for table `feed_back`
--
ALTER TABLE `feed_back`
  ADD PRIMARY KEY (`sn`);

--
-- Indexes for table `hiq`
--
ALTER TABLE `hiq`
  ADD PRIMARY KEY (`id`);

--
-- Indexes for table `post_table`
--
ALTER TABLE `post_table`
  ADD PRIMARY KEY (`post_id`);

--
-- Indexes for table `stud_details`
--
ALTER TABLE `stud_details`
  ADD PRIMARY KEY (`id`);

--
-- Indexes for table `stud_events`
--
ALTER TABLE `stud_events`
  ADD PRIMARY KEY (`id`);

--
-- AUTO_INCREMENT for dumped tables
--

--
-- AUTO_INCREMENT for table `admin_details`
--
ALTER TABLE `admin_details`
  MODIFY `id` int(50) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=2;
--
-- AUTO_INCREMENT for table `author`
--
ALTER TABLE `author`
  MODIFY `author_id` int(200) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=4;
--
-- AUTO_INCREMENT for table `calendar`
--
ALTER TABLE `calendar`
  MODIFY `id` int(11) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=19;
--
-- AUTO_INCREMENT for table `comment`
--
ALTER TABLE `comment`
  MODIFY `comment_id` int(10) UNSIGNED NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=43;
--
-- AUTO_INCREMENT for table `events`
--
ALTER TABLE `events`
  MODIFY `id` int(11) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=38;
--
-- AUTO_INCREMENT for table `feed_back`
--
ALTER TABLE `feed_back`
  MODIFY `sn` int(200) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=19;
--
-- AUTO_INCREMENT for table `hiq`
--
ALTER TABLE `hiq`
  MODIFY `id` int(25) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=16;
--
-- AUTO_INCREMENT for table `post_table`
--
ALTER TABLE `post_table`
  MODIFY `post_id` int(200) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=34;
--
-- AUTO_INCREMENT for table `stud_details`
--
ALTER TABLE `stud_details`
  MODIFY `id` int(11) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=11;
--
-- AUTO_INCREMENT for table `stud_events`
--
ALTER TABLE `stud_events`
  MODIFY `id` int(100) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=5;
/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;
